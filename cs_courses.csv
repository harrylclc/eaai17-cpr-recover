cmu_15-221,"Technical Communication for Computer Scientists. The course is designed for sophomore computer science majors to improve their  abilities in practical, professional communications (both written and oral).  It aims to help students compose clear, concise technical writings and oral  presentations for multi-level audiences.  Assignments include technical  definitions, descriptions, instructions, process explanations, abstracts,  memos, and research reports.  Assignments may incorporate recent computer  science research at Carnegie Mellon, projects in related technical courses,  and professional case studies.  Sophomores will likely find the course more useful if they have either had an internship or faculty-supervised research, including SURG projects prior to enrollment."
mit_6.641,"Electromagnetic Fields, Forces, and Motion. Electric and magnetic quasistatic forms of Maxwell's equations applied to dielectric, conduction, and magnetization boundary value problems. Electromagnetic forces, force densities, and stress tensors, including magnetization and polarization. Thermodynamics of electromagnetic fields, equations of motion, and energy conservation. Applications to synchronous, induction, and commutator machines; sensors and transducers; microelectromechanical systems; propagation and stability of electromechanical waves; and charge transport phenomena."
psu_CSE 551,"Numerical Solution of Ordinary Differential Equations. Methods for initial value and boundary value problems.  Convergence and stability analysis, automatic error control, stiff systems, boundary value problems."
msu_CSE 440,Introduction to Artificial Intelligence. Fundamental issues in intelligent systems. Knowledge representation and mechanisms of reasoning. Search and constraint satisfaction. Agents. Application areas of AI and current topics.
mit_6.UR,Undergraduate Research in Electrical Engineering and Computer Science. Individual research project arranged with appropriate faculty member or approved supervisor. Forms and instructions for the proposal and final report are available in the EECS Undergraduate Office.
iowa_CS:3110,"Introduction to Informatics. Fundamentals of computer science: algorithms, complexity, relational databases, systems concepts, programming in Python. Requirements: CS:1110 or graduate standing."
psu_CMPSC 311,Introduction to Systems Programming. Unix system programming in C; organization of programs and data; program analysis and support tools; software standards; common system functions.
mit_6.002,"Circuits and Electronics. Fundamentals of the lumped circuit abstraction. Resistive elements and networks, independent and dependent sources, switches and MOS devices, digital abstraction, amplifiers, and energy storage elements. Dynamics of first- and second-order networks; design in the time and frequency domains; analog and digital circuits and applications. Design exercises. Occasional laboratory. 4 Engineering Design Points."
psu_CMPSC 421,"Net-centric Computing. This course introduces JavaScript and AJAX for creating Rich Internet Applications, and XML for client-server communication and Web Services."
mit_6.853,"Topics in Algorithmic Game Theory. Presents research topics at the interface of computer science and game theory, with an emphasis on algorithms and computational complexity. Explores the types of game-theoretic tools that are applicable to computer systems, the loss in system performance due to the conflicts of interest of users and administrators, and the design of systems whose performance is robust with respect to conflicts of interest inside the system. Algorithmic focus is on algorithms for equilibria, the complexity of equilibria and fixed points, algorithmic tools in mechanism design, learning in games, and the price of anarchy."
princeton_COS  217,"Introduction to Programming Systems. Introduction to programming systems, including modular programming, advanced program design, programming style, test, debugging and performance tuning; machine languages and assembly language; and use of system call services."
mit_6.302,"Feedback Systems. Introduction to design of feedback systems. Properties and advantages of feedback systems. Time-domain and frequency-domain performance measures. Stability and degree of stability. Nyquist criterion. Frequency-domain design. Root locus method. Compensation techniques. Application to a wide variety of physical systems. Some previous laboratory experience with electronic systems is assumed (6.002, 6.071[J], or 16.04). 4 Engineering Design Points."
illinois_CS 241,"System Programming. Basics of system programming, including POSIX processes, process control, inter-process communication, synchronization, signals, simple memory management, file I/O and directories, shell programming, socket network programming, RPC programming in distributed systems, basic security mechanisms, and standard tools for systems programming such as debugging tools. Credit is not given for both CS 241 and ECE 391. "
mit_6.169,"Theory and Application of Circuits and Electronics. Building on the framework of 6.002, provides a deeper understanding of the theory and applications of circuits and electronics."
cmu_15-323,"Computer Music Systems and Information Processing. This course presents concepts and techniques for representing and manipulating discrete music information, both in real time and off line. Representations of music as explicitly timed event sequences will be introduced, and students will learn how to build efficient run-time systems for event scheduling, tempo control, and interactive processing. The MIDI protocol is used to capture real-time performance information and to generate sound. The course will also cover non-real-time processing of music data, including Markov models, style recognition, computer accompaniment, query-by-humming, and algorithmic composition. This course is independent of, and complementary to 15-322, Introduction to Computer Music, which focuses on sound synthesis and signal processing."
maryland_CMSC 460,"Computational Methods. Basic computational methods for interpolation, least squares, approximation, numerical quadrature, numerical solution of polynomial and transcendental equations, systems of linear equations and initial value problems for ordinary differential equations. Emphasis on methods and their computational properties rather than their analytic aspects. Intended primarily for students in the physical and engineering sciences."
psu_CSE 522,"Semantics of Programming Languages. Operational, axiomatic, and denotational semantics of programming languages; fixpoint theory of computation, verification of recursive programs; goto statements and continuations."
mit_6.012,"Microelectronic Devices and Circuits. Microelectronic device modeling, and basic microelectronic circuit analysis and design. Physical electronics of semiconductor junction and MOS devices. Relating terminal behavior to internal physical processes, developing circuit models, and understanding the uses and limitations of different models. Use of incremental and large-signal techniques to analyze and design transistor circuits, with examples chosen from digital circuits, linear amplifiers, and other integrated circuits. Design project. 4 Engineering Design Points."
mit_6.013,"Electromagnetics and Applications. Analysis and design of modern applications that employ electromagnetic phenomena, including signal and power transmission in guided communication systems and wireless and optical communications. Fundamentals include dynamic solutions to Maxwell's equations; electromagnetic power and energy, waves in media, guided waves, radiation, and diffraction; coupling to media and structures; resonance; and acoustic analogs."
stanford_CS 181,"Computers, Ethics, and Public Policy. (Formerly 201.) Primarily for majors entering computer-related fields. Ethical and social issues related to the development and use of computer technology. Ethical theory, and social, political, and legal considerations. Scenarios in problem areas: privacy, reliability and risks of complex systems, and responsibility of professionals for applications and consequences of their work."
mit_6.814,"Database Systems. Topics related to the engineering and design of database systems, including data models; database and schema design; schema normalization and integrity constraints; query processing; query optimization and cost estimation; transactions; recovery; concurrency control; isolation and consistency; distributed, parallel and heterogeneous databases; adaptive databases; trigger systems; pub-sub systems; semi structured data and XML querying. Lecture and readings from original research papers. Semester-long project and paper. Students taking graduate version complete different assignments. 4 Engineering Design Points."
cmu_15-359,"Probability and Computing. Probability theory has become indispensable in computer science.  In  areas such as artificial intelligence and computer science theory,  probabilistic methods and ideas based on randomization are central.  In other areas such as networks and systems, probability is becoming  an increasingly useful framework for handling uncertainty and modeling  the patterns of data that occur in complex systems.  This course gives  an introduction to probability as it is used in computer science  theory and practice, drawing on applications and current research  developments as motivation and context. Topics include combinatorial  probability and random graphs, heavy tail distributions, concentration  inequalities, various randomized algorithms, sampling random variables  and computer simulation, and Markov chains and their many  applications, from Web search engines to models of network protocols.  The course will assume familiarity with 3-D calculus and linear  algebra."
purdue_CS 50300,"Operating Systems. Basic principles of operating systems: addressing modes, indexing, relative addressing, indirect addressing, stack maintenance; implementation of multitask systems; control and coordination of tasks, deadlocks, synchronization, mutual exclusion; storage management, segmentation, paging, virtual memory; protection, sharing, access control; file systems; resource management; evaluation and prediction of performance. Students are expected to spend at least three hours per week gaining hands-on experience in using and modifying a small operating system."
caltech_CS 38,"Introduction to Algorithms. This course introduces techniques for the design and analysis of efficient algorithms. Major design techniques (the greedy approach, divide and conquer, dynamic programming, linear programming) will be introduced through a variety of algebraic, graph, and optimization problems. Methods for identifying intractability (via NP-completeness) will be discussed."
stanford_CS 148,"Introduction to Computer Graphics and Imaging. Introductory prerequisite course in the computer graphics sequence introducing students to the technical concepts behind creating synthetic computer generated images. Focuses on using OpenGL to create visual imagery, as well as an understanding of the underlying mathematical concepts including triangles, normals, interpolation, texture mapping, bump mapping, etc. Course will cover fundamental understanding of light and color, as well as how it impacts computer displays and printers. Class will discuss more thoroughly how light interacts with the environment, constructing engineering models such as the BRDF, plus various simplifications into more basic lighting and shading models. Also covers ray tracing technology for creating virtual images, while drawing parallels between ray tracers and real world cameras to illustrate various concepts. Anti-aliasing and acceleration structures are also discussed. The final class mini-project consists of building out a ray tracer to create visually compelling images. Starter codes and code bits will be provided to aid in development, but this class focuses on what you can do with the code as opposed to what the code itself looks like. Therefore grading is weighted toward in person ""demos"" of the code in action - creativity and the production of impressive visual imagery are highly encouraged."
iowa_CS:2110,"Programming for Informatics. Computing fundamentals for informatics students, including practical programming skills (e.g., in Perl, other scripting languages) and introduction to algorithms, data structures, databases. "
mit_6.863,"Natural Language and the Computer Representation of Knowledge. Explores the relationship between computer representation of knowledge and the structure of natural language. Emphasizes development of analytical skills necessary to judge the computational implications of grammatical formalisms, and uses concrete examples to illustrate particular computational issues. Efficient parsing algorithms for context-free grammars; Treebank grammars and statistical parsing. Question answering systems. Extensive laboratory work on building natural language processing systems. 8 Engineering Design Points."
cmu_15-104,"Introduction to Computing for Creative Practice. [IDeATe portal course] An introduction to fundamental computing principles and programming techniques for creative cultural practices, with special consideration to applications in music, design and the visual arts. Intended for students with little to no prior programming experience, the course develops skills and understanding of text-based programming in a procedural style, including idioms of sequencing, selection, iteration, and recursion. Topics include data organization (arrays, files, trees), interfaces and abstraction (modular software design, using sensor data and software libraries), basic algorithms (searching and sorting), and computational principles (randomness, concurrency, complexity). Intended for students following an IDEATE concentration or minor who have not taken 15-112."
cmu_15-387,"Computational Perception. In this course, we will first cover the biological and psychological foundational knowledge of biological perceptual systems, and then apply computational thinking to investigate the principles and mechanisms underlying natural perception. The course will focus on vision this year, but will also touch upon other sensory modalities. You will learn how to reason scientifically and computationally about problems and issues in perception, how to extract the essential computational properties of those abstract ideas, and finally how to convert these into explicit mathematical models and computational algorithms. Topics include perceptual representation and inference, perceptual organization, perceptual constancy, object recognition, learning and scene analysis."
stanford_CS 193A,"Android Programming. Introduction to building applications for Android platform. Examines key concepts of Android programming: tool chain, application life-cycle, views, controls, intents, designing mobile UIs, networking, threading, and more. Features ten weekly lectures and a series of small programming projects. Phone not required, but a phone makes the projects more engaging."
illinois_CS 411,"Database Systems. Examination of the logical organization of databases: the entity-relationship model; the hierarchical, network, and relational data models and their languages. Functional dependencies and normal forms. Design, implementation, and optimization of query languages; security and integrity; concurrency control, and distributed database systems. 3 undergraduate hours. 3 or 4 graduate hours. "
illinois_CS 125,Intro to Computer Science. Basic concepts in computing and fundamental techniques for solving computational problems. Intended as a first course for computer science majors and others with a deep interest in computing. 
maryland_CMSC 436,"Programming Handheld Systems. Fundamental principles and concepts that underlie the programming of handheld systems, such as mobile phones, personal digital assistants, and tablet computers. Particular emphasis will be placed on concepts such as limited display size, power, memory and CPU speed; and new input modalities, where handheld systems differ substantially from non-handheld systems, and thus require special programming tools and approaches. Students will apply these concepts and principles in the context of an existing handset programming platform."
stanford_CS 276,"Information Retrieval and Web Search. Text information retrieval systems; efficient text indexing; Boolean, vector space, and probabilistic retrieval models; ranking and rank aggregation; evaluating IR systems. Text clustering and classification: classification algorithms, latent semantic indexing, taxonomy induction; Web search engines including crawling and indexing, link-based algorithms, and web metadata."
stanford_CS 267,"Graph Algorithms. An introduction to advanced topics in graph algorithms. Focusing on a variety of graph problems, the course will explore topics such as small space graph data structures, approximation algorithms, dynamic algorithms, and algorithms for special graph classes. Topics include: approximation algorithms for shortest paths and graph matching, distance oracles, graph spanners, cliques and graph patterns, dynamic algorithms, graph coloring, algorithms for planar graphs."
mit_6.452,"Principles of Wireless Communication. Introduction to design, analysis, and fundamental limits of wireless transmission systems. Wireless channel and system models; fading and diversity; resource management and power control; multiple-antenna and MIMO systems; space-time codes and decoding algorithms; multiple-access techniques and multiuser detection; broadcast codes and precoding; cellular and ad-hoc network topologies; OFDM and ultrawideband systems; architectural issues."
stanford_CS 224U,"Natural Language Understanding. Project-oriented class focused on developing systems and algorithms for robust machine understanding of human language.  Draws on theoretical concepts from linguistics, natural language processing, and machine learning.  Topics include lexical semantics, distributed representations of meaning, relation extraction, semantic parsing, sentiment analysis, and dialogue agents, with special lectures on developing projects, presenting research results, and making connections with industry."
stanford_CS 103A,Mathematical Problem-solving Strategies. Problem solving strategies and techniques in discrete mathematics and computer science. Additional problem solving practice for CS103. In-class participation required.
mit_6.866,Machine Vision. Intensive introduction to the process of generating a symbolic description of the environment from an image. Students expected to attend the 6.801 lectures as well as occasional seminar meetings on special topics. Material presented in 6.801 is supplemented by reading from the literature. Students required to prepare a paper analyzing research in a selected area.
mit_6.021,"Cellular Biophysics and Neurophysiology. Integrated overview of the biophysics of cells from prokaryotes to neurons, with a focus on mass transport and electrical signal generation across cell membrane. First half of course focuses on mass transport through membranes: diffusion, osmosis, chemically mediated, and active transport. Second half focuses on electrical properties of cells: ion transport to action potentials in electrically excitable cells. Synaptic transmission. Electrical properties interpreted via kinetic and molecular properties of single voltage-gated ion channels. Laboratory and computer exercises illustrate the concepts. Provides instruction in written and oral communication. Students taking graduate version complete different assignments. 4 Engineering Design Points."
cmu_15-211,"Fundamental Data Structures and Algorithms. Fundamental programming concepts are presented together with supporting theoretical foundations and practical applications. This course emphasizes the practical application of techniques for writing and analyzing programs: data abstraction, program verification, and performance analysis. These techniques are applied in the design and analysis of fundamental algorithms and data structures. The course is currently taught in Java.  NOTE: students must achieve a C or better in order to use this course to satisfy the pre-requisite for any subsequent Computer Science course."
msu_CSE 843,"Language and Interaction. Introduction to foundations and the state-of-the-art technology enabling natural language communication with artificial agents. Speech recognition, acoustic modeling and language modeling, dialogue and discourse modeling,  psycholinguistic studies on situated human language processing, and their applications in situated human robot dialogue."
msu_CSE 410,Operating Systems. Principles and evolution of operating systems.  Process and processor management.  Concurrent processes and threads.  Primary and secondary storage management.  Case studies of modern operating systems.
iowa_CS:5350,"Design and Analysis of Algorithms. Review of design and analysis techniques; advanced data structures (binomial and Fibonacci heaps, disjoint sets); graph algorithms (network flows, matching, min‑cut); NP‑completeness, randomization and approximation algorithms; special topics (string matching, computational geometry, number theoretic algorithms). "
maryland_CMSC 106,Introduction to C Programming. Design and analysis of programs in C. An introduction to computing using structured programming concepts. Intended for students with no or minimal programming experience.
psu_CMPSC 458,"Fundamentals of Computer Graphics. Fundamentals of computer graphics:  input/output devices, transformation, projection, clipping, hidden line/surface elimination."
mit_6.852,"Distributed Algorithms. Design and analysis of concurrent algorithms, emphasizing those suitable for use in distributed networks. Process synchronization, allocation of computational resources, distributed consensus, distributed graph algorithms, election of a leader in a network, distributed termination, deadlock detection, concurrency control, communication, and clock synchronization. Special consideration given to issues of efficiency and fault tolerance. Formal models and proof methods for distributed computation."
maryland_CMSC 422,Introduction to Machine Learning. Machine Learning studies representations and algorithms that allow machines to improve their performance on a task from experience. This is a broad overview of existing methods for machine learning and an introduction to adaptive systems in general. Emphasis is given to practical aspects of machine learning and data mining.
cmu_15-237,"Special Topic: Cross-Platform Mobile Web Apps. An introduction to writing cross-platform mobile web apps.  Using a tool chain based on HTML5, CSS3, JavaScript, and a variety of supporting frameworks, we will write apps that are effectively designed both for desktop and mobile browsers, and which can be converted into native apps for Android, iOS, and Windows Phone 7 devices.  Additional topics will include designing user interfaces for mobile devices, accessing mobile device API's (such as accelerometer, GPS, compass, or camera), and power management issues.  While this course focuses on browser-side technologies, we will briefly explore JavaScript-based server-side technologies (though students should consider 15-437 for extensive treatment of server-side topics).  Note that we will not be writing native apps in Objective-C for iOS nor in Java for Android, though we may include some brief exposure to these technologies near the end of the course."
illinois_CS 461,"Computer Security I. Fundamental principles of computer and communications security and information assurance: ethics, privacy, notions of threat, vulnerabilities, and risk in systems, information warfare, malicious software, data secrecy and integrity issues, network security, trusted computing, mandatory and discretionary access controls, certification and accreditation of systems against security standards. Security mechanisms: authentication, auditing, intrusion detection, access control, cryptography, security protocols, key distribution. Same as ECE 422. 3 undergraduate hours. 3 or 4 graduate hours. "
mit_6.719,"Nanoelectronics. Meets with undergraduate subject 6.701, but requires the completion of additional/different homework assignments and or projects. See subject description under 6.701."
caltech_CS 11,"Computer Language Shop. A self-paced lab that provides students with extra practice and supervision in transferring their programming skills to a particular programming language; the course can be used for any language of the student’s choosing, subject to approval by the instructor. A series of exercises guide the student through the pragmatic use of the chosen language, building his or her familiarity, experience, and style. More advanced students may propose their own programming project as the target demonstration of their new language skills. CS 11 may be repeated for credit of up to a total of nine units."
iowa_CS:4350,"Logic in Computer Science. Applications of symbolic logic in computer science; symbolic logic as a powerful tool for modeling computation and computational devices and reasoning formally about them; introduction to several logics (i.e., propositional, predicate, temporal, modal) differing in their expressive power and focus, their uses in computer science; how to represent knowledge in these logics, what represents a valid argument, and how to prove or disprove, possibly automatically, the validity of a logical statement. "
cmu_15-122,"Principles of Imperative Computation. For students with a basic understanding of programming (variables, expressions, loops, arrays, functions). Teaches imperative programming and methods for ensuring the correctness of programs.  Students will learn the process and concepts needed to go from high-level descriptions of algorithms to correct imperative implementations, with specific application to basic data structures and algorithms.  Much of the course will be conducted in a subset of C amenable to verification, with a transition to full C near the end. This course prepares students for 15-213 and 15-210.  NOTE: students must achieve a C or better in order to use  this course to satisfy the pre-requisite for any subsequent Computer  Science course."
mit_6.803,"The Human Intelligence Enterprise. Analyzes seminal work directed at the development of a computational understanding of human intelligence, such as work on learning, language, vision, event representation, commonsense reasoning, self reflection, story understanding, and analogy. Reviews visionary ideas of Turing, Minsky, and other influential thinkers. Examines the implications of work on brain scanning, developmental psychology, and cognitive psychology. Emphasis on discussion and analysis of original papers. Students taking graduate version complete additional assignments."
mit_6.685,"Electric Machines. Treatment of electromechanical transducers, rotating and linear electric machines. Lumped-parameter electromechanics. Power flow using Poynting's theorem, force estimation using the Maxwell stress tensor and Principle of virtual work. Development of analytical techniques for predicting device characteristics: energy conversion density, efficiency; and of system interaction characteristics: regulation, stability, controllability, and response. Use of electric machines in drive systems. Problems taken from current research."
princeton_COS  402,"Artificial Intelligence. The fundamental principles, algorithms and techniques of modern artificial intelligence research and practice. Likely topics include: problem solving using search, game playing, logical inference, probabilistic reasoning in the presence of uncertainty, hidden Markov models, speech recognition, Markov decision processes, machine learning."
msu_CSE 429,"Interdisciplinary Topics in CyberSecurity. Technical, legal, criminal, medical business, and communication aspects of CyberSecurity."
stanford_CS 476B,"Music, Computing, Design II: Virtual and Augmented Reality for Music. Aesthetics, design, and exploration of creative musical applications of virtual reality (VR) and augmented reality (AR), centered around VR and mobile technologies. Comparison between AR, VR, and traditional software design paradigms for music. Topics include embodiment, interaction design, novel instruments, social experience, software design + prototyping."
illinois_CS 484,"Parallel Programming. Techniques for the programming of all classes of parallel computers and devices including shared memory and distributed memory multiprocessors, SIMD processors and co-processors, and special purpose devices. Key concepts in parallel programming such as reactive and transformational programming, speculation, speedup, isoefficiency, and load balancing. Synchronization primitives, libraries and languages for parallel programming such as OpenMP and MPI, performance monitoring, program tuning, analysis and programming of numerical and symbolic parallel algorithms. 3 undergraduate hours. 3 or 4 graduate hours. "
msu_CSE 914,Formal Methods in Software Development. Current research in selected areas of software engineering such as: approaches for the incorporation of formal methods in software development; current projects using formal methods in software engineering; object-oriented analysis and development techniques; and approaches for the incorporation of user-interface analysis and design in software development.
msu_CSE 420,Computer Architecture. Organization and architecture of computer systems.  Arithmetic Logic Unit and control unit implementations.  Hardwired and microprogrammed control.  Pipelined processors; data and branch hazards.  Memory hierarchy and storage devices.  Input-output and peripheral devices.  Advanced architectures.
"princeton_COS  109,EGR  109","Computers in Our World. Computers are all around us.  How does this affect the world we live in?  This course is a broad introduction to computing technology for humanities and social sciences students. Topics will be drawn from current issues and events, and will include discussion of how computers work; what programming is and why it is hard; how the Internet and the Web work; security and privacy."
illinois_CS 463,"Computer Security II. Program security, trusted base, privacy, anonymity, non-interference, information flow, confinement, advanced auditing, forensics, intrusion detection, key management and distribution, policy composition and analysis, formal approaches to specification and verification of secure systems and protocols, and topics in applied cryptography. Same as ECE 424. 3 undergraduate hours. 3 or 4 graduate hours. "
stanford_CS 147,"Introduction to Human-Computer Interaction Design. Introduces fundamental methods and principles for designing, implementing, and evaluating user interfaces. Topics: user-centered design, rapid prototyping, experimentation, direct manipulation, cognitive principles, visual design, social software, software tools. Learn by doing: work with a team on a quarter-long design project, supported by lectures, readings, and studios."
caltech_CS 101,"Special Topics in Computer Science. The topics covered vary from year to year, depending on the students and staff. Primarily for undergraduates."
illinois_CS 492,"Senior Project I. First part of a project course in computer science. Students work in teams to solve typical commercial or industrial problems. Work involves planning, design, and implementation. Extensive oral and written work is required both on-campus and possibly off-campus at sponsors' locations. CS 492 must be taken as a sequence with either CS 493 or CS 494. 3 undergraduate hours. No graduate credit. Credit is not given for both CS 492 and a project course in another engineering department for the same project. "
mit_6.905,"Large-scale Symbolic Systems. Concepts and techniques for the design and implementation of large software systems that can be adapted to uses not anticipated by the designer. Applications include compilers, computer-algebra systems, deductive systems, and some artificial intelligence applications. Covers means for decoupling goals from strategy, mechanisms for implementing additive data-directed invocation, work with partially-specified entities, and how to manage multiple viewpoints. Topics include combinators, generic operations, pattern matching, pattern-directed invocation, rule systems, backtracking, dependencies, indeterminacy, memoization, constraint propagation, and incremental refinement. Students taking graduate version complete additional assignments."
purdue_CS 62600,"Advanced Information Assurance. Advanced topics in information assurance, including selections from the following: penetration testing, formal verification of systems, formal models of information flow and protection, distributed system authentication, protocol design and attack, computer viruses and malware, intrusion and anomaly detection models, multi-level security, active defenses, investigation and forensics, network firewalls, anonymity and identity, e-commerce support, and database security models and mechanisms. Offered every third semester."
cmu_15-354,"Computational Discrete Mathematics. This course is about the computational aspects of some of the standard  concepts of discrete mathematics (relations, functions, logic, graphs,  algebra, automata), with emphasis on efficient algorithms.  We begin  with a brief introduction to computability and computational complexity. Other topics include: iteration, orbits and fixed points, order and equivalence relations, propositional logic and satisfiability testing, finite fields and shift register sequences, finite state machines, and cellular automata.    Computational support for some of the material is available in the form of a Mathematica package."
caltech_CS 1,"Introduction to Computer Programming. A course on computer programming emphasizing the program design process and pragmatic programming skills. It will use the Python programming language and will not assume previous programming experience. Material covered will include data types, variables, assignment, control structures, functions, scoping, compound data, string processing, modules, basic input/output (terminal and file), as well as more advanced topics such as recursion, exception handling and object-oriented programming. Program development and maintenance skills including debugging, testing, and documentation will also be taught. Assignments will include problems drawn from fields such as graphics, numerics, networking, and games. At the end of the course, students will be ready to learn other programming languages in courses such as CS 11, and will also be ready to take more in-depth courses such as CS 2 and CS 4."
iowa_CS:3330,"Algorithms. Algorithm design techniques (e.g., greedy algorithms, divide‑and‑conquer, dynamic programming, randomization); fundamental algorithms (e.g., basic graph algorithms); techniques for efficiency analysis; computational intractability and NP‑completeness. "
mit_6.922,Advanced 6-A Internship. Provides academic credit for the second assignment of 6-A undergraduate students at companies affiliated with the department's 6-A internship program.
caltech_CS 119,"Reliable Software: Testing and Monitoring. The class discusses theoretical and practical aspects of software testing and monitoring. Topics include finite state machine testing algorithms, random testing, constraint-based testing, coverage measures, automated debugging, logics and algorithms for runtime monitoring, and aspect-oriented approaches to monitoring. Emphasis is placed on automation. Students will be expected to develop and use software testing and monitoring tools to develop reliable software systems."
illinois_CS 467,"Social Visualization. Visualizing social interaction in networked spaces: investigation of patterns in networked communications systems such as messaging (email, instant messaging), social networking sites and collaborative sites; social network theory and visualizations; exploration of how to move beyond existing visualization techniques; visualizing the network identity over compilations of online data. 3 undergraduate hours. 3 or 4 graduate hours. "
psu_CMPSC 431W,"Database Management Systems. Topics include: conceptual data modeling, relational data model, relational query languages, schema normalization, database/Internet applications, and database system issues."
cmu_15-464,"Technical Animation. This course introduces techniques for computer animation such as keyframing, procedural methods, motion capture, and simulation. The course also includes a brief overview of story-boarding, scene composition, lighting and sound track generation. The second half of the course will explore current research topics in computer animation such as dynamic simulation of flexible and rigid objects,automatically generated control systems, and evolution of behaviors. The course should be appropriate for graduate students in all areas and for advanced undergraduates."
maryland_CMSC 714,"High Performance Computing Systems. Slected topics in high-performance systems, including contemporary architectures, interconnection topologies, shared memory and message-passing systems, multi-threaded kernels, latency avoidance and hiding techniques, methods for data and workload partitioning performance profiling, debugging."
stanford_CS 229T,"Statistical Learning Theory. (Same as STATS 231) How do we formalize what it means for an algorithm to learn from data?  This course focuses on developing mathematical tools for answering this question.  We will present various common learning algorithms and prove theoretical guarantees about them.  Topics include online learning, kernel methods, generalization bounds (uniform convergence), and spectral methods."
psu_CSE 531,Parallel Processors and Processing. Parallel processor organization; basic algorithms suitable for such systems; parallel sorting and interconnection networks; applications and discussion of specific processors.
illinois_CS 460,"Security Laboratory. Operating systems security: access control, least privilege mechanism and malware techniques. Network security: firewalls, sniffing, tunnels, intrusion detection, AAA and worm structure. System security: forensics security architectures, and attack/defend exercises. Complements CS 461 via hands-on project. Same as ECE 419. 3 undergraduate hours. 3 or 4 graduate hours. "
cmu_15-412,"Operating System Practicum. The goal of this class is for students to acquire hands-on experience with operating-system code as it is developed and deployed in the real world.  Groups of two to four students will select, build, install, and become familiar with an open-source operating system project; propose a significant extension or upgrade to that project; and develop a production-quality implementation meeting the coding standards of that project.  Unless infeasible, the results will be submitted to the project for inclusion in the code base.  Variations on this theme are possible at the discretion of the instructor.  For example, it may be possible to work within the context of a non-operating-system software infrastructure project (window system, web server, or embedded network device kernel) or to extend a 15-410 student kernel.  In some situations students may work alone.  Group membership and unit count (9 units versus 12) will be decided by the third week of the semester.  Contributing to a real-world project will involve engaging in some mixture of messy, potentially open-ended activities such as: learning a revision control system, writing a short design document, creating and updating a simple project plan, participating in an informal code review, synthesizing scattered information about hardware and software, classifying and/or reading large amounts of code written by various people over a long period of time, etc."
mit_6.01,"Introduction to EECS I. An integrated introduction to electrical engineering and computer science, taught using substantial laboratory experiments with mobile robots. Key issues in the design of engineered artifacts operating in the natural world: measuring and modeling system behaviors; assessing errors in sensors and effectors; specifying tasks; designing solutions based on analytical and computational models; planning, executing, and evaluating experimental tests of performance; refining models and designs. Issues addressed in the context of computer programs, control systems, probabilistic inference problems, circuits and transducers, which all play important roles in achieving robust operation of a large variety of engineered systems. 6 Engineering Design Points."
psu_CMPSC 483W,Software Design Methods. Applications of scientific knowledge and methods in the design and construction of computer software using engineering concepts.
maryland_CMSC 250,"Discrete Structures. Fundamental mathematical concepts related to computer science, includin finite and infinite sets, relations, functions, and propositional logic. Introduction to other techniques, modeling and solving problems in computer science.  Introduction to permutations, combinations, graphs, and trees with selected applications."
psu_CSE 564,Complexity of Combinatorial Problems. NP-completeness theory; approximation and heuristic techniques; discrete scheduling; additional complexity classes.
psu_CMPSC 438,"Computer Network Architecture and Programming. Network architectures, communication protocols, internetworking, network security, client-server computing, web application development, programming with APIs."
mit_6.602,"Fundamentals of Photonics. Covers the fundamentals of optics and the interaction of light and matter, leading to devices such as light emitting diodes, optical amplifiers, and lasers. Topics include classical ray, wave, beam, and Fourier optics; Maxwell's electromagnetic waves; resonators; quantum theory of photons; light-matter interaction; laser amplification; lasers; and semiconductors optoelectronics. Students taking graduate version complete additional assignments."
caltech_CMS/CS/EE 144,"Networks: Structure Economics. Social networks, the web, and the internet are essential parts of our lives and we all depend on them every day, but do you really know what makes them work?This course studies the “big” ideas behind our networked lives. Things like, what do networks actually look like (and why do they all look the same)? How do search engines work? Why do memes spread the way they do? How does web advertising work? For all these questions and more, the course will provide a mixture of both mathematical analysis and hands-on labs. The course assumes students are comfortable with graph theory, probability, and basic programming."
mit_6.431,Applied Probability. Meets with undergraduate subject 6.041. Requires the completion of additional advanced home problems.
illinois_CS 477,"Formal Software Devel Methods. Mathematical models, languages, and methods for software specification, development, and verification. Same as ECE 478. 3 undergraduate hours. 3 or 4 graduate hours. "
mit_6.870,"Advanced Topics in Computer Vision. Seminar exploring advanced research topics in the field of computer vision; focus varies with lecturer. Typically structured around discussion of assigned research papers and presentations by students. Example research areas explored in this seminar include learning in vision, computational imaging techniques, multimodal human-computer interaction, biomedical imaging, representation and estimation methods used in modern computer vision."
iowa_CS:2820,"Object-Oriented Software Development. Object‑oriented design and software development methodology; team programming projects; GUIs, event handling, network programming, concurrency, data representation, IO programming. "
illinois_CS 493,"Senior Project II, ACP. Continuation of CS 492. Identical to CS 494 except for an additional writing component. See CS 494. 3 undergraduate hours. No graduate credit. Credit is not given for both CS 493 and a project course in another engineering department for the same project. "
psu_CMPSC 451,"Numerical Computations. Algorithms for interpolation, approximation, integration, nonlinear equations, linear systems, fast FOURIER transform, and differential equations emphasizing computational properties and implementation.  Students may take only one course for credit from CSE/MATH 451 and CSE/MATH 455."
mit_6.522,"Quantitative Physiology: Organ Transport Systems. Application of the principles of energy and mass flow to major human organ systems. Mechanisms of regulation and homeostasis. Anatomical, physiological and pathophysiological features of the cardiovascular, respiratory and renal systems. Systems, features and devices that are most illuminated by the methods of physical sciences. Laboratory work includes some animal studies. Students taking graduate version complete additional assignments."
mit_6.152,"Micro/Nano Processing Technology. Introduces the theory and technology of micro/nano fabrication. Lectures and laboratory sessions on basic processing techniques such as vacuum processes, lithography, diffusion, oxidation, and pattern transfer. Students fabricate MOS capacitors, nanomechanical cantilevers, and microfluidic mixers. Emphasis on the interrelationships between material properties and processing, device structure, and the electrical, mechanical, optical, chemical or biological behavior of devices. Provides background for thesis work in micro/nano fabrication. Students engage in extensive written and oral communication exercises. 6 Engineering Design Points."
mit_6.115,"Microcomputer Project Laboratory. Introduces the analysis and design of embedded systems. Microcontrollers provide adaptation, flexibility, and real-time control. Emphasis placed on the construction of complete systems, including a five-axis robot arm, a fluorescent lamp ballast, a tomographic imaging station (e.g. a CAT scan), and a simple calculator. Introduces a wide range of basic tools, including software and development tools, peripheral components such as A/D converters, communication schemes, signal processing techniques, closed-loop digital feedback control, interface and power electronics, and modeling of electromechanical systems. Includes a sequence of assigned projects, followed by a final project of the student's choice, emphasizing creativity and uniqueness. Final project may be expanded to satisfy a 6.UAP project. Provides instruction in written and oral communication. 12 Engineering Design Points."
cmu_15-451,"Algorithm Design and Analysis. This course is about the design and analysis of algorithms. We study specific algorithms for a variety of problems, as well as general design and analysis techniques. Specific topics include searching, sorting, algorithms for graph problems, efficient data structures, lower bounds and NP-completeness. A variety of other topics may be covered at the discretion of the instructor. These include parallel algorithms, randomized algorithms, geometric algorithms, low level techniques for efficient programming, cryptography, and cryptographic protocols."
psu_CSE 557,Concurrent Matrix Computation. This course discusses matrix computations on architectures that exploit concurrency.  It will draw upon recent research in the field.
illinois_CS 465,"User Interface Design. A project-focused course covering fundamental principles of user interface design, implementation, and evaluation. Small teams work on a term-long project that involves: analysis of the problem domain, user skills, and tasks; iterative prototyping of interfaces to address user needs; conducting several forms of evaluation such as cognitive walkthroughs and usability tests; implementation of the final prototype. Non-technical majors may enroll as non-programmers who participate in all aspects of the projects with the possible exception of implementation. 3 undergraduate hours. 3 or 4 graduate hours. "
stanford_CS 194,"Software Project. Design, specification, coding, and testing of a significant team programming project under faculty supervision. Documentation includes a detailed proposal. Public demonstration of the project at the end of the quarter. Preference given to seniors. May be repeat for credit."
cmu_15-319,"Cloud Computing. This course gives students an overview of Cloud Computing, which is the delivery of computing as a service over a network, whereby distributed resources are rented, rather than owned, by an end user as a utility. Students will study its enabling technologies, building blocks, and gain hands-on experience through projects utilizing public cloud infrastructures.  Cloud computing services are widely adopted by many organizations across domains.  The course will introduce the cloud and cover the topics of data centers, software stack, virtualization, software defined networks and storage, cloud storage, and programming models. We will start by discussing the cloud¿s motivating factors, benefits, challenges, service models, SLAs and security. We will describe several concepts behind data center design and management, which enable the economic and technological benefits of the cloud paradigm. Next, we will study how CPU, memory and I/O resources, network (SDN) and storage (SDS) are virtualized, and the key role of virtualization to enable the cloud. Subsequently, students will study cloud storage concepts like data distribution, durability, consistency and redundancy. We will discuss distributed file systems, NoSQL databases and object storage using HDFS, CephFS, HBASE, MongoDB, Cassandra, DynamoDB, S3, and Swift as case studies. Finally, students will study the MapReduce, Spark and GraphLab programming models. Students will work with Amazon Web Services and Microsoft Azure, to rent and provision compute resources and then program and deploy applications using these resources. Students will develop and evaluate scaling and load balancing solutions, work with cloud storage systems, and develop applications in several programming paradigms. 15619 students must complete an extra team project which entails designing and implementing a cost- and performance-sensitive web-service for querying big data."
mit_6.871,"Performance Engineering of Software Systems. Project-based introduction to building efficient, high-performance and scalable software systems. Topics include performance analysis, algorithmic techniques for high performance, instruction-level optimizations, vectorization, cache and memory hierarchy optimization, and parallel programming. Students taking graduate version complete additional assignments. 12 Engineering Design Points."
caltech_CS 24,"Introduction to Computing Systems. Basic introduction to computer systems, including hardware-software interface, computer architecture, and operating systems. Course emphasizes computer system abstractions and the hardware and software techniques necessary to support them, including virtualization (e.g., memory, processing, communication), dynamic resource management, and common-case optimization, isolation, and naming."
cmu_15-437,"Web Application Development. This course will introduce concepts in programming web application servers. We will study the fundamental architectural elements of programming web sites that produce content dynamically. The primary technologies introduced will be the Django framework for Python and Java Servlets, but we will cover related topics as necessary so that students can build significant applications. Such topics include: HTTP, HTML, CSS, Javascript, XML, Design Patterns, Relational and Non-relational Databases, Object-Relation Mapping tools, Security, Web Services, Cloud Deployment, Internationalization, and Scalability and Performance Issues. Students must be comfortable programming in Java and/or Python to register for this course. Students must provide their own computer hardware for this course. Please see the Related URL above for more information."
princeton_COS  451,"Computational Geometry. This course introduces the basic concepts of geometric computing, illustrating the importance of this field for a variety of applications areas, such as computer graphics, solid modeling, robotics, database, pattern recognition, and statistical analysis. Algorithms are presented and analyzed for a large number of geometric problems, and an array of fundamental techniques are discussed (e.g., convex hulls, Voronoi diagrams, intersection problems, multidimensional searching)."
iowa_CS:2420,"Databases for Informatics. Design and implementation of relational database systems: introduction to the relational model, database design, database normalization, use of database query and manipulation languages such as SQL. "
caltech_CS/CNS/EE 156,"Learning Systems. Introduction to the theory, algorithms, and applications of automated learning. How much information is needed to learn a task, how much computation is involved, and how it can be accomplished. Special emphasis will be given to unifying the different approaches to the subject coming from statistics, function approximation, optimization, pattern recognition, and neural networks."
msu_CSE 435,"Software Engineering. Software lifecycle including specification, design, coding, testing, and verification of a software product.  Stepwise refinement and traceability.  Software maintenance and documentation."
illinois_CS 548,"Models of Cognitive Processes. Formal models and concepts in automated cognition; integrating machine learning and prior knowledge; current approaches and detailed analyses of the role of reasoning in the learning process; computational complexity and fundamental tradeoffs between expressiveness and tractability; implications for state-of-the-art artificial intelligence areas such as automated planning, the semantic web, relational learning, structured prediction, latent models, structure learning, theory formation, etc.; philosophical and psychological aspects of integrating analytic and empirical evidence. Same as ECE 548. "
mit_6.865,"Advanced Computational Photography. Presents fundamentals and applications of hardware and software techniques used in digital and computational photography, with an emphasis on software methods. Provides sufficient background to implement solutions to photographic challenges and opportunities. Topics include cameras and image formation, image processing and image representations, high-dynamic-range imaging, human visual perception and color, single view 3-D model reconstruction, morphing, data-rich photography, super-resolution, and image-based rendering. Students taking graduate version complete additional assignments."
mit_6.630,"Electromagnetics. Explores electromagnetic phenomena in modern applications, including wireless and optical communications, circuits, computer interconnects and peripherals, microwave communications and radar, antennas, sensors, micro-electromechanical systems, and power generation and transmission. Fundamentals include quasistatic and dynamic solutions to Maxwell's equations; waves, radiation, and diffraction; coupling to media and structures; guided and unguided waves; modal expansions; resonance; acoustic analogs; and forces, power, and energy."
purdue_CS 53500,"Interactive Computer Graphics. (ME 57300) The principles of computer graphics and interactive graphical methods for problem solving. Emphasis placed on both development and use of graphical tools for various display devices. Several classes of graphics hardware considered in detail. Topics include pen plotting, storage tubes, refresh, dynamic techniques, three dimensions, color, modeling of geometry, and hidden surface removal. Part of the laboratory involves use of an interactive minicomputer graphics system. Knowledge of programming required."
stanford_CS 107E,"Computer Systems from the Ground Up. Introduction to the fundamental concepts of computer systems through bare metal programming on the Raspberry Pi. Explores how five concepts come together in computer systems: hardware, architecture, assembly code, the C language, and software development tools. Students do all programming with a Raspberry Pi kit and several add-ons (LEDs, buttons). Topics covered include: the C programming language, data representation, machine-level code, computer arithmetic, compilation, memory organization and management, debugging, hardware, and I/O."
cmu_15-449,"Engineering Distributed Systems. This is a course for students with strong design and implementation skills who are likely to pursue careers as software architects and lead engineers.  It may be taken by well-prepared undergraduates with excellent design and implementation skills in low-level systems programing.  The course assumes a high level of proficiency in all aspects of operating system design and implementation.  This course will help students prepare for leadership roles in creating and evolving the complex, large-scale computer systems that society will increasingly depend on in the future.  The course will teach the organizing principles of such systems, identifying a core set of versatile techniques that are applicable across many system layers. Students will acquire the knowledge base, intellectual tools, hands-on skills and modes of thought needed to build well-engineered computer systems that withstand the test of time, growth in scale, and stresses of live use.   Topics covered include: caching, prefetching, damage containment, scale reduction, hints, replication, hash-based techniques, and fragmentation reduction.  A substantial project component is an integral part of the course.  A high level of proficiency in systems programming is expected. If you do not have the 15-410 prerequisite you will need to get approval from the faculty."
mit_6.450,Principles of Digital Communication. Communication sources and channels; data compression; entropy and the AEP; Lempel-Ziv universal coding; scalar and vector quantization; L2 waveforms; signal space and its representation by sampling and other expansions; aliasing; the Nyquist criterion; PAM and QAM modulation; Gaussian noise and random processes; detection and optimal receivers; fading channels and wireless communication; introduction to communication system design.
msu_CSE 484,"Information Retrieval. Retrieval models including Boolean, vector space, and probabilistic models. Architecture of information retrieval systems. Text clustering, categorization and filtering. Recommendation systems. Natural language processing for text retrieval. Information extraction, question answering. Multimedia retrieval. Digital libraries."
mit_6.556,"Data Acquisition and Image Reconstruction in MRI. Applies analysis of signals and noise in linear systems, sampling, and Fourier properties to magnetic resonance (MR) imaging acquisition and reconstruction. Provides adequate foundation for MR physics to enable study of RF excitation design, efficient Fourier sampling, parallel encoding, reconstruction of non-uniformly sampled data, and the impact of hardware imperfections on reconstruction performance. Surveys active areas of MR research. Assignments include Matlab-based work with real data. Includes visit to a scan site for human MR studies."
stanford_CS 265,"Randomized Algorithms and Probabilistic Analysis. Randomness pervades the natural processes around us, from the formation of networks, to genetic recombination, to quantum physics. Randomness is also a powerful tool that can be leveraged to create algorithms and data structures which, in many cases, are more efficient and simpler than their deterministic counterparts. This course covers the key tools of probabilistic analysis, and application of these tools to understand the behaviors of random processes and algorithms. Emphasis is on theoretical foundations, though we will apply this theory broadly, discussing applications in machine learning and data analysis, networking, and systems. Topics include tail bounds, the probabilistic method, Markov chains, and martingales, with applications to analyzing random graphs, metric embeddings, random walks, and a host of powerful and elegant randomized algorithms."
psu_CSE 542,"Database Systems II. Important in-depth issues relating to data engineering such as distributed databases, information management for engineering design, data models."
mit_6.003,"Signals and Systems. Presents the fundamentals of signal and system analysis. Topics include discrete-time and continuous-time signals, Fourier series and transforms, Laplace and Z transforms, and analysis of linear, time-invariant systems. Applications drawn broadly from engineering and physics, including audio and image processing, communications, and automatic control. 4 Engineering Design Points."
illinois_CS 574,"Randomized Algorithms. Basic and advanced concepts in the design and analysis of randomized algorithms. Sampling; concentration inequalities such as Chernoff-Hoeffding bounds; probabilistic method; random walks, dimension reduction; entropy; martingales and Azuma's inequality; derandomization. Randomized algorithms for sorting and searching; graphs; geometric problems. Basics of pseudorandomness and randomized complexity classes. "
stanford_CS 157,"Logic and Automated Reasoning. An elementary exposition from a computational point of view of propositional and predicate logic, axiomatic theories, and theories with equality and induction. Interpretations, models, validity, proof, strategies, and applications. Automated deduction: polarity, skolemization, unification, resolution, equality."
illinois_CS 447,"Natural Language Processing. Part-of-speech tagging, parsing, semantic analysis and machine translation. Relevant linguistics concepts from morphology (word formation) and lexical semantics (the meaning of words) to syntax (sentence structure) and compositional semantics (the meaning of sentences). 3 undergraduate hours. 3 or 4 graduate hours. Credit is not given for both CS 447 and LING 406. "
"princeton_COS  432,ELE  432","Information Security. Security issues in computing, communications, and electronic commerce. Goals and vulnerabilities; legal and ethical issues; basic cryptology; private and authenticated communication; electronic commerce; software security; viruses and other malicious code; operating system protection; trusted systems design; network security; firewalls; policy, administration and procedures; auditing; physical security; disaster recovery; reliability; content protection; privacy."
illinois_CS 476,Program Verification. Formal methods for demonstrating correctness and other properties of programs. Invariant assertions; Hoare axiomatics; well-founded orderings for proving termination; structural induction; computational induction; data structures; parallel programs; overview of predicate calculus. 3 undergraduate hours. 3 or 4 graduate hours. 
illinois_CS 420,"Parallel Progrmg: Sci & Engrg. Fundamental issues in design and development of parallel programs for various types of parallel computers. Various programming models according to both machine type and application area. Cost models, debugging, and performance evaluation of parallel programs with actual application examples. Same as CSE 402 and ECE 492. 3 undergraduate hours. 3 or 4 graduate hours. "
stanford_CS 221,"Artificial Intelligence: Principles and Techniques. Artificial intelligence (AI) has had a huge impact in many areas, including medical diagnosis, speech recognition, robotics, web search, advertising, and scheduling.  This course focuses on the foundational concepts that drive these applications.  In short, AI is the mathematics of making good decisions given incomplete information (hence the need for probability) and limited computation (hence the need for algorithms).  Specific topics include search, constraint satisfaction, game playing, Markov decision processes, graphical models, machine learning, and logic."
stanford_CS 106A,"Programming Methodology. Introduction to the engineering of computer applications emphasizing modern software engineering principles: object-oriented design, decomposition, encapsulation, abstraction, and testing. Uses the Java programming language. Emphasis is on good programming style and the built-in facilities of the Java language. No prior programming experience required. Summer quarter enrollment is limited. Priority given to Stanford students."
mit_6.111,"Introductory Digital Systems Laboratory. Lectures and labs on digital logic, flip flops, PALs, FPGAs, counters, timing, synchronization, and finite-state machines prepare students for the design and implementation of a final project of their choice: games, music, digital filters, wireless communications, video, or graphics. Extensive use of Verilog for describing and implementating digital logic designs. Students engage in extensive written and oral communication exercises. 12 Engineering Design Points."
mit_6.437,"Inference and Information. Introduction to principles of Bayesian and non-Bayesian statistical inference. Hypothesis testing and parameter estimation, sufficient statistics; exponential families. EM agorithm. Log-loss inference criterion, entropy and model capacity. Kullback-Leibler distance and information geometry. Asymptotic analysis and large deviations theory. Model order estimation; nonparametric statistics. Computational issues and approximation techniques; Monte Carlo methods. Selected special topics such as universal prediction and compression."
mit_6.776,"High Speed Communication Circuits. Principles and techniques of high-speed integrated circuits used in wireless/wireline data links and remote sensing. On-chip passive component design of inductors, capacitors, and antennas. Analysis of distributed effects, such as transmission line modeling, S-parameters, and Smith chart. Transceiver architectures and circuit blocks, which include low-noise amplifiers, mixers, voltage-controlled oscillators, power amplifiers, and frequency dividers. Involves IC/EM simulation and laboratory projects."
msu_CSE 260,"Discrete Structures in Computer Science. Propositional and first order logic. Equivalence and methods of proof. Basics of counting. Set operations, relations, functions.  Grammars and finite state automata.  Discrete probability. Applications to computer science and engineering."
msu_CSE 480,"Database Systems. Storage of and access to physical databases including indexing, hashing, and range accesses. Relational data models, database design principles, query languages, query optimization, transaction processing and recovery techniques. Object-oriented and distributed databases."
mit_6.161,"Modern Optics Project Laboratory. Lectures, laboratory exercises and projects on optical signal generation, transmission, detection, storage, processing and display. Topics include polarization properties of light; reflection and refraction; coherence and interference; Fraunhofer and Fresnel diffraction; holography; Fourier optics; coherent and incoherent imaging and signal processing systems; optical properties of materials; lasers and LEDs; electro-optic and acousto-optic light modulators; photorefractive and liquid-crystal light modulation; display technologies; optical waveguides and fiber-optic communication systems; photodetectors. Students may use this subject to find an advanced undergraduate project. Students engage in extensive oral and written communcation exercises. Recommended prerequisites: 6.007 or 8.03. 12 Engineering Design Points."
mit_6.071,"Electronics, Signals, and Measurement. Provides the knowledge necessary for reading schematics and designing, building, analyzing, and testing fundamental analog and digital circuits. Students construct interactive examples and explore the practical uses of electronics in engineering and experimental science, including signals and measurement fundamentals. Uses state-of-the-art hardware and software for data acquisition, analysis, and control. Suitable for students with little or no previous background in electronics."
illinois_CS 233,"Computer Architecture. Fundamentals of computer architecture: digital logic design, working up from the logic gate level to understand the function of a simple computer; machine-level programming to understand implementation of high-level languages; performance models of modern computer architectures to enable performance optimization of software; hardware primitives for parallelism and security. "
mit_6.268,"Network Science and Models. Introduces the main mathematical models used to describe large networks and dynamical processes that evolve on networks. Static models of random graphs, preferential attachment, and other graph evolution models. Epidemic propagation, opinion dynamics, and social learning. Applications drawn from social, economic, natural, and infrastructure networks, as well as networked decision systems such as sensor networks."
illinois_CS 419,"Production Computer Graphics. Advanced methods for representing, displaying, and rendering two-, three-, and four-dimensional scenes. General algebraic curves and surfaces, splines, Gaussian and bump-function representation, fractals, particle systems, constructive solid geometry methods, lighting models, radiosity, advanced ray-tracing methods, surface texturing animation techniques, data visualization methods. 3 undergraduate hours. 3 or 4 graduate hours. "
cmu_15-441,"Computer Networks. The emphasis in this course will be on the basic performance and engineering trade-offs in the design and implementation of computer networks. To make the issues more concrete, the class includes several multi-week projects requiring significant design and implementation.    The goal is for students to learn not only what computer networks are and how they work today, but also why they are designed the way they are and how they are likely to evolve in the future. We will draw examples primarily from the Internet. Topics to be covered include: network architecture, routing, congestion/flow/error control, naming and addressing,  peer-to-peer and the web, internetworking, and network security."
mit_6.875,"Cryptography and Cryptanalysis. A rigorous introduction to modern cryptography. Emphasis on the fundamental cryptographic primitives of public-key encryption, digital signatures, pseudo-random number generation, and basic protocols and their computational complexity requirements."
psu_CMPSC 221,"Object Oriented Programming with Web-Based Applications. This course will continue with object-oriented programming and will introduce graphics, virtual machines, programming language concepts and web-based programming using Java."
cmu_15-411,"Compiler Design. This course covers the design and implementation of compiler and run-time systems for high-level languages, and examines the interaction between language design, compiler design, and run-time organization. Topics covered include syntactic and lexical analysis, handling of user-defined types and type-checking, context analysis, code generation and optimization, and memory management and run-time organization."
mit_6.828,"Operating System Engineering. Fundamental design and implementation issues in the engineering of operating systems. Lectures based on the study of a symmetric multiprocessor version of UNIX version 6 and research papers. Topics include virtual memory; file system; threads; context switches; kernels; interrupts; system calls; interprocess communication; coordination, and interaction between software and hardware. Individual laboratory assignments accumulate in the construction of a minimal operating system (for an x86-based personal computer) that implements the basic operating system abstractions and a shell. Knowledge of programming in the C language is a prerequisite. 6 Engineering Design Points."
psu_CMPSC 456,Introduction to Numerical Analysis II. Polynomials and piecewise polynomial approximation; matrix least square problems; numerical solution of eigenvalue problems; numerical solutions of ordinary differential equations.
maryland_CMSC 414,"Computer and Network Security. An introduction to the topic of security in the context of computer systems and networks. Identify, analyze, and solve network-related security problems in computer systems. Fundamentals of number theory, authentication, and encryption technologies, as well as the practical problems that have to be solved in order to make those technologies workable in a networked environment, particularly in the wide-area Internet environment."
psu_CMPSC 302,"Intermediate Visual Programming. OO programming, visual programming, classes, objects, ADTs, inheritance, recursion, regular expressions, user-defined controls, documentation, testing, verification, productivity tools."
caltech_CS 118,"Logic Model Checking for Formal Software Verification. An introduction to the theory and practice of logic model checking as an aid in the formal proofs of correctness of concurrent programs and system designs. The specific focus is on automata-theoretic verification. The course includes a study of the theory underlying formal verification, the correctness of programs, and the use of software tools in designs."
cmu_15-390,"Entrepreneurship for Computer Science. This course is designed to develop skills related to entrepreneurship and innovation for non-business undergraduate and graduate students in the School of Computer Science.  The course assumes no background courses in business and is appropriate for those who are interested in bringing innovations to market either through new companies or existing companies.   The course provides an overview of entrepreneurship and innovation, develops an entrepreneurial frame of mind, and provides a framework for learning the rudiments of how to generate ideas.  Students come up with or are presented with potential ideas and learn how to develop these ideas into opportunities, and to explore their potential for becoming viable businesses.  They learn how to do market research, to develop go-to-market strategies, value propositions and to differentiate their products or services from potential competitors.  The focus is on understanding and developing strategies for approaching the key elements of the entrepreneurial process...opportunity, resources and team. The course consists of a balance of lectures, case studies and encounters with entrepreneurs, investors and business professionals.  The students are exposed to financial and intellectual property issues, and encounter a real world perspective on entrepreneurship, innovation and leadership.  The output of the course is a mini-business plan or venture opportunity screening document that can be developed into a business plan in a subsequent course entitled New Venture Creation or through independent study."
cmu_15-214,"Principles of Software Construction: Objects, Design, and Concurrency. Software engineers today are less likely to design data structures and algorithms from scratch and more likely to build systems from library and framework components. In this course, students engage with concepts related to the construction of software systems at scale, building on their understanding of the basic building blocks of data structures, algorithms, program structures, and computer structures. The course covers technical topics in four areas: (1) concepts of design for complex systems, (2) object oriented programming, (3) static and dynamic analysis for programs, and (4) concurrent and distributed software. Student assignments involve engagement with complex software such as distributed massively multi-player game systems and frameworks for graphical user interaction."
stanford_CS 549,"Human-Computer Interaction in the Real World. Intended for students who are pursuing a focus on HCI, this course focuses on showing students how HCI gets applied in industry across different types of companies. The course consists of on-site visits to large companies (for example Google, Yahoo, Square, Tesla) and to startups to talk to the HCI practitioners at these companies and learn first hand how HCI and design fits in at different companies. The objective of this class is to have students understand how HCI practitioners fit into organizations, the roles they play, and what skills they need in the real world to be able to do their magic."
cmu_15-386,"Neural Computation. Computational neuroscience is an interdisciplinary science that seeks to understand how the brain computes  to achieve  natural intelligence.  It seeks to understand the computational principles and mechanisms of intelligent behaviors and mental abilities — such as perception, language, motor control, and learning — by building artificial systems and computational models with the same capabilities. This course explores how neurons encode and process information, adapt and learn, communicate, cooperate, compete and compute at the individual level as well as at the levels of networks and systems. It will introduce basic concepts in computational modeling, information theory, signal processing, system analysis, statistical and probabilistic inference. Concrete examples will be drawn from the visual system and the motor systems,  and studied from computational, psychological and biological perspectives. Students will learn to perform computational experiments using Matlab and quantitative studies of neurons and neuronal networks."
stanford_CS 106B,"Programming Abstractions. Abstraction and its relation to programming. Software engineering principles of data abstraction and modularity. Object-oriented programming, fundamental data structures (such as stacks, queues, sets) and data-directed design. Recursion and recursive data structures (linked lists, trees, graphs). Introduction to time and space complexity analysis. Uses the programming language C++ covering its basic facilities."
illinois_CS 494,Senior Project II. Continuation of CS 492. 3 undergraduate hours. No graduate credit. Credit is not given for both CS 494 and a project course in another engineering department for the same project. 
illinois_CS 173,"Discrete Structures. Discrete mathematical structures frequently encountered in the study of Computer Science. Sets, propositions, Boolean algebra, induction, recursion, relations, functions, and graphs. Credit is not given for both CS 173 and MATH 213. "
mit_6.344,"Digital Image Processing. Digital images as two-dimensional signals. Digital signal processing theories used for digital image processing, including one-dimensional and two-dimensional convolution, Fourier transform, discrete Fourier transform, and discrete cosine transform. Image processing basics. Image enhancement. Image restoration. Image coding and compression. Video processing including video coding and compression. Additional topics including digital high-definition television systems."
psu_CMPSC 460,"Principles of Programming Languages. Design and implementation of high level programming languages and survey of language paradigms including imperative, functional, and object-oriented programming."
mit_6.632,"Electromagnetic Wave Theory. Solutions to Maxwell equations and physical interpretation. Topics include waves in media, equivalence principle, duality and complementarity, Huygens' principle, Fresnel and Fraunhofer diffraction, radiation and dyadic Green's functions, scattering, metamaterials, and plasmonics, mode theory, dielectric waveguides, and resonators. Examples deal with limiting cases of electromagnetic theory, multi-port elements, filters and antennas. Discusses current topics in microwave and photonic devices."
msu_CSE 331,"Algorithms and Data Structures. Linear data structures, trees, graphs and algorithms which operate on them. Fundamental algorithms for searching, sorting, string matching, graph problems.  Design and analysis of algorithms."
psu_CMPSC 461,"Programming Language Concepts. Fundamental concepts of programming language design, specifications, and implementation; programming language paradigms and features; program verification."
illinois_CS 428,"Software Engineering II. Continuation of CS 427. Software development, management, and maintenance. Project and configuration management, collaborative development models, software quality assurance, interoperability domain engineering and software reuse, and software re-engineering. Same as CSE 429. 3 undergraduate hours. 3 or 4 graduate hours. "
iowa_CS:5610,"High Performance Computer Architecture. Problems involved in designing and analyzing current machine architectures using hardware description language (HDL) simulation and analysis, hierarchical memory design, pipeline processing, vector machines, numerical applications, multiprocessor architectures and parallel algorithm design techniques; evaluation methods to determine relationship between computer design and design goals. "
caltech_SS/CS 149,"Introduction to Algorithmic Economics. This course will equip students to engage with current topics of active research at the intersection of social and information sciences, including: algorithmic mechanism design; auctions; existence and computation of equilibria; and learning and games."
psu_CMPSC 436,"Communications and Networking. Data transmission, basic signaling, data encoding, error control, communication protocols, security, network topologies, routing, switching, internetworking, emerging high speed networks."
illinois_CS 438,"Communication Networks. Layered architectures and the OSI Reference Model; design issues and protocols in the transport, network, and data link layers; architectures and control algorithms of local-area, point-to-point, and satellite networks; standards in networks access protocols; models of network interconnection; overview of networking and communication software. Same as ECE 438. 3 undergraduate hours. 3 or 4 graduate hours. "
illinois_CS 527,"Topics in Software Engineering. Fault-tolerant software, software architecture, software patterns, multi-media software, and knowledge-based approaches to software engineering. Case studies. "
stanford_CS 193P,"iPhone and iPad Application Programming. Tools and APIs required to build applications for the iPhone and iPad platforms using the iOS SDK. User interface design for mobile devices and unique user interactions using multi-touch technologies. Object-oriented design using model-view-controller paradigm, memory management, Swift programming language. Other topics include: object-oriented database API, animation, mobile device power management, multi-threading, networking and performance considerations."
purdue_CS 53600,"Data Communication And Computer Networks. Data communications: communication hardware technologies including local area and longhaul network hardware, circuit and packet switching, interfaces between computer and network hardware, and performance issues. Network architecture: protocol software and conceptual layering, reliable delivery over an unreliable channel, transport protocols, virtual circuits, datagrams, internetworking as a fundamental design concept, the client-server paradigm, naming and name binding, name servers, addressing and address resolution, routing and routing algorithms, congestion and flow control techniques, network file systems, distribution of computation, and DARPA internet protocols (TCP/IP) as examples of protocol organization."
mit_6.846,"Parallel Computing. Introduction to parallel and multicore computer architecture and programming. Topics include the design and implementation of multicore processors; networking, video, continuum, particle and graph applications for multicores; communication and synchronization algorithms and mechanisms; locality in parallel computations; computational models, including shared memory, streams, message passing, and data parallel; multicore mechanisms for synchronization, cache coherence, and multithreading. Performance evaluation of multicores; compilation and runtime systems for parallel computing. Substantial project required. 4 Engineering Design Points."
mit_6.045,"Automata, Computability, and Complexity. Provides an introduction to some of the central ideas of theoretical computer science, including circuits, finite automata, Turing machines and computability, efficient algorithms and reducibility, the P versus NP problem, NP-completeness, the power of randomness, cryptography, computational learning theory, and quantum computing. Examines the classes of problems that can and cannot be solved in various computational models."
mit_6.781,"Nanostructure Fabrication. Describes current techniques used to analyze and fabricate nanometer-length-scale structures and devices. Emphasizes imaging and patterning of nanostructures, including fundamentals of optical, electron (scanning, transmission, and tunneling), and atomic-force microscopy; optical, electron, ion, and nanoimprint lithography, templated self-assembly, and resist technology. Surveys substrate characterization and preparation, facilities, and metrology requirements for nanolithography. Addresses nanodevice processing methods, such as liquid and plasma etching, lift-off, electroplating, and ion-implant. Discusses applications in nanoelectronics, nanomaterials, and nanophotonics."
psu_CMPSC 202,"Programming for Engineers with FORTRAN. Development and implementation of algorithms in a procedure-oriented language, with emphasis on numerical methods for engineering problems.  A student may receive credit for only one of the following courses: CMPSC 101, 102, 200, 201, or 202."
iowa_CS:4520,"Computer Graphics. Introduction to computer graphics algorithms and techniques, with emphasis on interactive 3‑D graphics; coordinate systems and frames, modeling and viewing transformations, rendering, shading, lighting, texture, bump, environment mapping, animation, ray tracing, radiosity. "
princeton_COS  518,"Advanced Computer Systems. COS-518 is a graduate course in computer systems. Its goals are: (1) To understand the core concepts of computer systems, rather than particular implementation details.  (2) To understand the state of the art in distributed, storage, mobile, and operating systems.  (3) To understand how to engage in cutting-edge systems research and development.  This course assumes a basic familiarity with computer systems and networking concepts."
msu_CSE 847,"Machine Learning. Computational study of learning and data mining. Strengths and limitations of various learning paradigms, including supervised learning, learning from scalar reward, unsupervised learning, and learning with domain knowledge."
caltech_SS/CS 241,"Topics in Algorithmic Economics. This is a graduate-level seminar covering recent topics at the intersection of computer science and economics. Topics will vary, but may include, e.g., dynamics in games, algorithmic mechanism design, and prediction markets."
msu_CSE 335,"Object-oriented Software Design. Development of large software products, libraries, and product families.  Object-oriented programming using inheritance and polymorphism.  Design methods. Specification and the use of contracts to design reliable software.  Configuration management and life-cycle issues."
iowa_CS:4330,"Theory of Computation. Finite automata; regular sets and expressions; context‑free and context‑sensitive grammars, their properties; push‑down automata; standard, universal, and linear‑bounded Turing machines; relationships between formal languages and automata; undecidability and its consequences. "
iowa_CS:3620,"Operating Systems. Introduction to modern operating systems, including device control, memory management and addressing, process scheduling, interprocess communication, interrupts, synchronization, security. "
cmu_15-465,"Animation Art and Technology. Animation Art and Technology is an interdisciplinary course cross-listed between Art and Computer Science. Faculty and teaching assistants from computer science and art teach the class as a team. It is a project-based course in which four to five interdisciplinary teams of students produce animations. Most of the animations have a substantive technical component and the students are challenged to consider innovation with content to be equal with the technical. The class includes basic tutorials for work in Maya leading toward more advanced applications and extensions of the software such as motion capture and algorithms for animating cloth, hair, particles, and grouping behaviors. The first class will meet in CFA room 303."
psu_CMPSC 442,"Artificial Intelligence. Introduction to the theory, research paradigms, implementation techniques, and philosophies of artificial intelligence."
mit_6.581,"Foundations of Algorithms and Computational Techniques in Systems Biology. Illustrates computational approaches to solving problems in systems biology. Uses a series of case studies to demonstrate how an effective match between the statement of a biological problem and the selection of an appropriate algorithm or computational technique can lead to fundamental advances. Covers several discrete and numerical algorithms used in simulation, feature extraction, and optimization for molecular, network, and systems models in biology. Students taking graduate version complete additional assignments."
iowa_CS:4440,"Web Mining. Core methods underlying development of applications on the Web; examples of relevant applications, including those pertaining to information retrieval, summarization of Web documents, and identifying social networks. "
mit_6.172,"Performance Engineering of Software Systems. Project-based introduction to building efficient, high-performance and scalable software systems. Topics include performance analysis, algorithmic techniques for high performance, instruction-level optimizations, vectorization, cache and memory hierarchy optimization, and parallel programming. Students taking graduate version complete additional assignments. 12 Engineering Design Points."
mit_6.334,"Power Electronics. The application of electronics to energy conversion and control. Modeling, analysis, and control techniques. Design of power circuits including inverters, rectifiers, and dc-dc converters. Analysis and design of magnetic components and filters. Characteristics of power semiconductor devices. Numerous application examples, such as motion control systems, power supplies, and radio-frequency power amplifiers. 6 Engineering Design Points."
illinois_CS 565,"Human-Computer Interaction. In-depth coverage of advanced topics in human-computer interaction (HCI). Applied models of human performance and attention, design tools for creative design tasks, interruptions and peripheral displays, gestures, and bimanual input, and usability evaluation techniques. Students complete a research-oriented term project of their choosing. "
cmu_15-322,"Introduction to Computer Music. Computers are used to synthesize sound, process signals, and  compose music. Personal computers have replaced studios full of sound  recording and processing equipment, completing a revolution that began with  recording and electronics. In this course, students will learn the  fundamentals of digital audio, basic sound synthesis algorithms, and  techniques for digital audio effects and processing. Students will apply  their knowledge in programming assignments using a very high-level  programming language for sound synthesis and composition. In a final  project, students will demonstrate their mastery of tools and techniques  through music composition or by the implementation of a significant  sound-processing technique."
purdue_CS 63800,"Multimedia Networking And Operating Systems. For graduate students in computer sciences who have a background in networking and operating systems and are interested in research in networked multimedia systems. The course consists of a selection of networking and operating system topics for realizing high performance, predictable, scalable, flexible, and secure multimedia systems. Topics may vary to reflect timely research issues and the current interests of the instructor(s). Students are expected to complete a term project. Presentations also may be required. Undergraduate background in computer science required."
purdue_CS 63600,"Internetworking. Principles of Internetwork architecture and communication protocols underlying interoperable systems. Topics include universal interconnection, Internet addressing and routing, address binding, control of Internet congestion and flow, examples of Internet protocol suites (TCP/IP and XNS), round trip time estimation, naming and name resolution, Internet applications programs, and the ISO/OSI model."
stanford_CS 232,"Digital Image Processing. Image sampling and quantization color, point operations, segmentation, morphological image processing, linear image filtering and correlation, image transforms, eigenimages, multiresolution image processing, noise reduction and restoration, feature extraction and recognition tasks, image registration. Emphasis is on the general principles of image processing. Students learn to apply material by implementing and investigating image processing algorithms in Matlab and optionally on Android mobile devices. Term project. Recommended: EE261, EE278."
psu_CSE 539,"Topics in Computer Architecture. Study of current advanced issues in design, implementation and applications of complex computer systems."
mit_6.254,"Game Theory with Engineering Applications. Introduction to fundamentals of game theory and mechanism design with motivations for each topic drawn from engineering applications (including distributed control of wireline/wireless communication networks, transportation networks, pricing). Emphasis on the foundations of the theory, mathematical tools, as well as modeling and the equilibrium notion in different environments. Topics include normal form games, supermodular games, dynamic games, repeated games, games with incomplete/imperfect information, mechanism design, cooperative game theory, and network games."
iowa_CS:5800,"Fundamentals of Software Engineering. Problem analysis, requirements definition, specification, design, implementation, testing/maintenance, integration, project management; human factors; management, technical communication; design methodologies; software validation, verification; group project experience. "
stanford_CS 367,"Algebraic Graph Algorithms. Due to the surprisingly fast algorithms for the problem, matrix multiplication is routinely used as a basic building block for algorithms beating the brute-force approach. This course explores matrix multiplication algorithms and a variety of problems, mostly within graph algorithms, that can be solved faster using a fast matrix multiplication algorithm. Topics include: Fast Matrix Multiplication, algebraic algorithms for Graph Transitive Closure, All Pairs Shortest Paths and variants of the problem, Perfect Matching and Minimum Cycle, and a variety of equivalences between problems involving matrix multiplication."
mit_6.004,"Computation Structures. Introduces architecture of digital systems, emphasizing structural principles common to a wide range of technologies. Multilevel implementation strategies; definition of new primitives (e.g., gates, instructions, procedures, and processes) and their mechanization using lower-level elements. Analysis of potential concurrency; precedence constraints and performance measures; pipelined and multidimensional systems. Instruction set design issues; architectural support for contemporary software structures. 4 Engineering Design Points."
stanford_CS 211,Content Creation in Virtual Reality. Students are immersed in a cutting edge virtual reality development environment consisting of both hardware and software elements. Studentsnwill progress from configuring a comprehensive development environment to designing and implementing networked content in VR. The deep development focus is overlaid with a discussion series with leaders in the VR space to provide both breadth and depth to a student¿s understanding of the VR space.
cmu_15-610,"Engineering Distributed Systems. This is a master's level course for students with strong design and  implementation skills who are likely to pursue careers as software  architects and lead engineers.  It may be taken by well-prepared  undergraduates with excellent design and implementation skills in  low-level systems programing.  The course assumes a high level of  proficiency in all aspects of operating system design and implementation.    This course will help students prepare for leadership roles in creating  and evolving the complex, large-scale computer systems that society will  increasingly depend on in the future.  The course will teach the  organizing principles of such systems, identifying a core set of  versatile techniques that are applicable across many system layers.  Students will acquire the knowledge base, intellectual tools, hands-on  skills and modes of thought needed to build well-engineered computer  systems that withstand the test of time, growth in scale, and stresses of  live use.     Topics covered include: caching, prefetching, damage containment,  scale reduction, hints, replication, hash-based techniques, and  fragmentation reduction.  A substantial project component is an  integral part of the course.    A high level of proficiency in systems programming is expected."
purdue_CS 51400,"Numerical Analysis. (MA 51400)  Iterative methods for solving nonlinear equations; linear difference equations, applications to solution of polynomial equations; differentiation and integration formulas; numerical solution of ordinary differential equations; roundoff error bounds."
caltech_CS/CNS 174,"Computer Graphics Projects. This laboratory class offers students an opportunity for independent work covering recent computer graphics research. In coordination with the instructor, students select a computer graphics modeling, rendering, interaction, or related algorithm and implement it. Students are required to present their work in class and discuss the results of their implementation and any possible improvements to the basic methods. May be repeated for credit with instructor’s permission."
cmu_15-405,"Engineering Distributed Systems. This is a course for students with strong design and implementation skills who are likely to pursue careers as software architects and lead engineers.  It may be taken by well-prepared undergraduates with excellent design and implementation skills in low-level systems programing.  The course assumes a high level of proficiency in all aspects of operating system design and implementation.  This course will help students prepare for leadership roles in creating and evolving the complex, large-scale computer systems that society will increasingly depend on in the future.  The course will teach the organizing principles of such systems, identifying a core set of versatile techniques that are applicable across many system layers. Students will acquire the knowledge base, intellectual tools, hands-on skills and modes of thought needed to build well-engineered computer systems that withstand the test of time, growth in scale, and stresses of live use.   Topics covered include: caching, prefetching, damage containment, scale reduction, hints, replication, hash-based techniques, and fragmentation reduction.  A substantial project component is an integral part of the course.  A high level of proficiency in systems programming is expected. If you do not have the 15-410 prerequisite you will need to get approval from the faculty."
mit_6.673,"Introduction to Numerical Simulation in Electrical Engineering. Selection of a simulation model and physical approximations. Solution of nonlinear coupled PDEs in 1-D through finite difference and finite element methods, Newton's method, and variants. Finite difference and finite element methods in 2-D and sparse matrix methods emphasizing conjugate gradient algorithms. Semiconductor devices used as primary examples; additional examples drawn from E&M modeling, nonlinear pulse propagation, and laser physics."
mit_6.345,"Automatic Speech Recognition. Introduces the rapidly developing fields of automatic speech recognition and spoken language processing. Topics include acoustic theory of speech production and perception, acoustic-phonetics, signal representation, acoustic and language modeling, search, hidden Markov modeling, robustness, adaptation, discriminative and alternative approaches. Lectures interspersed with theory and applications. Assignments include problems, laboratory exercises, and a term project. 4 Engineering Design Points."
stanford_CS 143,Compilers. Principles and practices for design and implementation of compilers and interpreters. Topics: lexical analysis; parsing theory; symbol tables; type systems; scope; semantic analysis; intermediate representations; runtime environments; code generation; and basic program analysis and optimization. Students construct a compiler for a simple object-oriented language during course programming projects.
maryland_CMSC 456,"Cryptology. Importance in protecting data in communications between computers. The subject lies on the border between mathematics and computer science. Mathematical topics include number theory and probability, and computer science topics include complexity theory."
cmu_15-321,"Research Methods for Experimental Computer Science. The success or failure of an experiment can turn on the details of how the experiment was performed — the experimental method. It is critical that the methodology be consistent with whatever research hypothesis is being pursued.  The goal of this project-based course is to give students familiarity with and appreciation for the subtleties of a range of experimental techniques essential to high-quality empirical research.  The course is based on a project that will illustrate important concepts of research methods.  Example topics include user-study design and operation, data gathering, data diagnosis, experiment design and execution, signal detection, performance evaluation, error analysis, reporting results, etc.  The project will explore the challenging open problem of keystroke dynamics, a biometric regime which seeks to identify/authenticate/discriminate users on the basis of their typing styles.  In this context, numerous methodological issues provide the stimulus for learning how to perform empirical research from the beginning to the end of a project.  Lectures will present necessary background material about the problem area and experimental methods; homework assignments and a team project will give students guided, hands-on, research and practical experience.  At the end of the course, students will be acquainted with the basic issues in experimental methods, and will be able to perform independent work using the lessons learned and resources provided.  Enrollment is limited to graduate students, juniors, and seniors. It will be helpful for students to have some experience with scripting languages (e.g., Perl, Python, Tcl, etc), statistically-oriented packages (e.g., R, Matlab, Weka) or other implementations of various machine-learning-type classifiers.  This course can be used to satisfy the Lab requirement for the Computer Science major."
cmu_15-385,"Introduction to Computer Vision. An introduction to the science and engineering of computer vision,  i.e.  the analysis of the patterns in visual images with the view to  understanding the objects and processes in the world that generate  them.  Major topics include image formation and sensing, fourier  analysis, edge and contour detection, inference of depth, shape and  motion, classification, recognition, tracking, and active vision. The  emphasis is on the learning of fundamental mathematical concepts and  techniques and applying them to solve real vision problems. The  discussion will also include comparison with human and animal vision  from psychological and biological perspectives. Students will learn to  think mathematically and develop skills in translating ideas and  mathematical thoughts into programs to solve real vision problems."
stanford_CS 227B,"General Game Playing. A general game playing system accepts a formal description of a game to play it without human intervention or algorithms designed for specific games. Hands-on introduction to these systems and artificial intelligence techniques such as knowledge representation, reasoning, learning, and rational behavior. Students create GGP systems to compete with each other and in external competitions."
iowa_CS:4500,Research Methods in Human-Computer Interaction. Survey of recent research in the field of human‑computer interaction; research methods and current readings. 
stanford_CS 166,"Data Structures. Techniques in the design, analysis, and implementation of data structures.  Isometries between data structures (including red/black trees and 2-3-4 trees), amortized analysis (including Fibonacci heaps and splay trees), and randomization (including count-min sketches and dynamic perfect hash tables).  Data structures for integers and strings (including van Emde Boas trees and suffix trees).  Possible additional topics include functional data structures, concurrent data structures, and spatial data structures."
maryland_CMSC 330,"Organization of Programming Languages. The semantics of programming languages and their run-time organization. Several different models of languages are discussed, including procedural (e.g., C, Pascal), functional (e.g., ML, LISP), rule-based (e.g., Prolog), and object-oriented (e.g., C++, Smalltalk). Run-time structures, including dynamic versus static scope rules, storage for strings, arrays, records, and object inheritance are explored."
psu_CSE 544,System Security. Review current research in computer and operating system security.
princeton_COS  513,"Foundations of Probabilistic Modeling. Probabilistic modeling is a mainstay in data analysis, providing essential tools for complex analyses of the vast amounts of data that have become available in modern scientific research. In this course, we study probabilistic graphical models, a unifying formalism for describing and extending many previous methods from statistics and engineering; the mathematical foundations of this field; and the methods underlying the current state of the art. We study these models through careful reading of current papers and a thorough real data analysis project."
mit_6.728,"Applied Quantum and Statistical Physics. Elementary quantum mechanics and statistical physics. Introduces applied quantum physics. Emphasizes experimental basis for quantum mechanics. Applies Schrodinger's equation to the free particle, tunneling, the harmonic oscillator, and hydrogen atom. Variational methods. Elementary statistical physics; Fermi-Dirac, Bose-Einstein, and Boltzmann distribution functions. Simple models for metals, semiconductors, and devices such as electron microscopes, scanning tunneling microscope, thermonic emitters, atomic force microscope, and more."
psu_CMPSC 473,"Operating Systems Design & Construction. Design and implementation of computer operating systems; management of various system resources:  processes, memory, processors, files, input/output devices."
illinois_CS 426,"Compiler Construction. Compiler structure, syntax analysis, syntax-directed translation, automatically constructed recognizers, semantic analysis, code generation, intermediate language, optimization techniques. 3 undergraduate hours. 3 or 4 graduate hours. "
stanford_CS 255,"Introduction to Cryptography. For advanced undergraduates and graduate students. Theory and practice of cryptographic techniques used in computer security. Topics: encryption (symmetric and public key), digital signatures, data integrity, authentication, key management, PKI, zero-knowledge protocols, and real-world applications."
mit_6.131,"Power Electronics Laboratory. Introduces the design and construction of power electronic circuits and motor drives. Laboratory exercises include the construction of drive circuitry for an electric go-cart, flash strobes, computer power supplies, three-phase inverters for AC motors, and resonant drives for lamp ballasts and induction heating. Basic electric machines introduced include DC, induction, and permanent magnet motors, with drive considerations. Final project may be expanded to serve as a 6.UAP project, with instructor permission. Provides instruction in written and oral communication. 12 Engineering Design Points."
caltech_BE/CS/CNS/Bi 191,"Biomolecular Computation. This course investigates computation by molecular systems, emphasizing models of computation based on the underlying physics, chemistry, and organization of biological cells. We will explore programmability, complexity, simulation of and reasoning about abstract models of chemical reaction networks, molecular folding, molecular self-assembly, and molecular motors, with an emphasis on universal architectures for computation, control, and construction within molecular systems. If time permits, we will also discuss biological example systems such as signal transduction, genetic regulatory networks, and the cytoskeleton; physical limits of computation, reversibility, reliability, and the role of noise, DNA-based computers and DNA nanotechnology. Part a develops fundamental results; part b is a reading and research course: classic and current papers will be discussed, and students will do projects on current research topics."
mit_6.175,"Constructive Computer Architecture. Illustrates a constructive (as opposed to a descriptive) approach to computer architecture. Topics include combinational and pipelined arithmetic-logic units (ALU), in-order pipelined microarchitectures, branch prediction, blocking and unblocking caches, interrupts, virtual memory support, cache coherence and multicore architectures. Labs in a modern Hardware Design Language (HDL) illustrate various aspects of microprocessor design, culminating in a term project in which students present a multicore design running on an FPGA board. 12 Engineering Design Points."
cmu_15-251,"Great Theoretical Ideas in Computer Science. This course is about how to use theoretical ideas to formulate and solve problems in computer science. It integrates mathematical material with general problem solving techniques and computer science applications. Examples are drawn from algorithms, complexity theory, game theory, probability theory, graph theory, automata theory, algebra, cryptography, and combinatorics. Assignments involve both mathematical proofs and programming.  NOTE: students must achieve a C or better in order to use this course to satisfy the pre-requisite for any subsequent Computer Science course."
purdue_CS 63500,"Capturing And Rendering Real-World Scenes. Advanced techniques for automated modeling and visualization of complex environments, such as rooms, buildings, urban scenes, and landscapes.  Topics covered are at the confluence of computer graphics, computer vision and engineering, and include:  capture technologies, acquisition device calibration, view registration, panoramic images, 3D reconstruction from images, view morphing, 3D image warping, lightfield modeling and rendering, visual hulls, point-based modeling and rendering, view dependent texture mapping, and application development issues and examples."
stanford_CS 231B,"The Cutting Edge of Computer Vision. (Formerly 223C) More than one-third of the brain is engaged in visual processing, the most sophisticated human sensory system. Yet visual recognition technology has fundamentally influenced our lives on the same scale and scope as text-based technology has, thanks to Google, Twitter, Facebook, etc. This course is designed for those students who are interested in cutting edge computer vision research, and/or are aspiring to be an entrepreneur using vision technology. Course will guide students through the design and implementation of three core vision technologies: segmentation, detection and classification on three highly practical, real-world problems. Course will focus on teaching the fundamental theory, detailed algorithms, practical engineering insights, and guide them to develop state-of-the-art systems evaluated based on the most modern and standard benchmark datasets."
iowa_CS:4740,"Large Data Analysis. Current areas that deal with problem of Big Data; techniques from computer science, mathematics, statistics; high performance and parallel computing, matrix techniques, cluster analysis, visualization; variety of applications including Google PageRank, seismology, Netflix‑type problems, weather forecasting; fusion of data with simulation; projects. "
maryland_CMSC 424,"Database Design. Students are introduced to database systems and motivates the database approach as a mechanism for modeling the real world. An in-depth coverage of the relational model, logical database design, query languages, and other database concepts including query optimization, concurrency control; transaction management, and log based crash recovery. Distributed and Web database architectures are also discussed."
caltech_CS 138,"Computer Algorithms. Design and analysis of algorithms. Techniques for problems concerning graphs, flows, number theory, string matching, data compression, geometry, linear algebra and coding theory. Optimization, including linear programming. Randomization. Basic complexity theory and cryptography."
caltech_CS 3,"Introduction to Software Engineering. CS 3 is a practical introduction to software engineering with an emphasis on understanding and minimizing risk in large software projects. Students will work in teams on a course-long project. Topics covered include revision control, code reviews, testing and testability, code readability, API design, refactoring, and documentation. The course provides opportunities to present your work to the class, and emphasizes working with other people’s code, both that of classmates and pre-existing frameworks."
maryland_CMSC 351,"Algorithms. A systematic study of the complexity of some elementary algorithms related to sorting, graphs and trees, and combinatorics. Algorithms are analyzed using mathematical techniques to solve recurrences and summations."
psu_CMPSC 448,Machine Learning and Algorithmic AI. Evaluation and use of machine learning models; algorithmic elements of artificial intelligence.
cmu_15-312,"Foundations of Programming Languages. This course discusses in depth many of the concepts underlying the design, definition, implementation, and use of modern programming languages. Formal approaches to defining the syntax and semantics are used to describe the fundamental concepts underlying programming languages. A variety of programming paradigms are covered such as imperative, functional, logic, and concurrent programming. In addition to the formal studies, experience with programming in the languages is used to illustrate how different design goals can lead to radically different languages and models of computation."
caltech_CS 2,"Introduction to Programming Methods. CS 2 is a demanding course in programming languages and computer science. Topics covered include data structures, including lists, trees, and graphs; implementation and performance analysis of common algorithms; algorithm design principles, in particular recursion and dynamic programming; concurrency and network programming; basic numerical computation methods. Heavy emphasis is placed on the use of compiled languages and development tools, including source control and debugging. The course includes weekly laboratory exercises and written homework covering the lecture material and program design. The course is intended to establish a foundation for further work in many topics in the computer science option."
illinois_CS 210,"Ethical & Professional Issues. Ethics for the computing profession. Ethical decision-making; licensing; intellectual property, freedom of information, and privacy. Credit is not given for both CS 210 and ECE 316. "
mit_6.456,"Array Processing. Adaptive and non-adaptive processing of signals received at arrays of sensors. Deterministic beamforming, space-time random processes, optimal and adaptive algorithms, and the sensitivity of algorithm performance to modeling errors and limited data. Methods of improving the robustness of algorithms to modeling errors and limited data are derived. Advanced topics include an introduction to matched field processing and physics-based methods of estimating signal statistics. Homework exercises providing the opportunity to implement and analyze the performance of algorithms in processing data supplied during the course."
msu_CSE 422,Computer Networks. Computer network architectures and models. Physical media and signaling. Data link protocols. Medium access control. Routing and IP. Transport services including TCP/UDP. Network applications. Local-area and wide-area networks.
stanford_CS 316,"Advanced Multi-Core Systems. In-depth coverage of the architectural techniques used in modern, multi-core chips for mobile and server systems. Advanced processor design techniques (superscalar cores, VLIW cores, multi-threaded cores, energy-efficient cores), cache coherence, memory consistency, vector processors, graphics processors, heterogeneous processors, and hardware support for security and parallel programming. Students will become familiar with complex trade-offs between performance-power-complexity and hardware-software interactions. A central part of CS316 is a project on an open research question on multi-core technologies."
psu_CMPSC 485W,Computer Science Senior Project II. Computer science capstone project with documentation emphasis.
mit_6.0002,"Introduction to Computational Thinking and Data Science. Provides an introduction to using computation to understand real-world phenomena. Topics include plotting, stochastic programs, probability and statistics, random walks, Monte Carlo simulations, modeling data, optimization problems, and clustering. Combination of 6.0001 and 6.0002 counts as REST subject."
cmu_15-295,"Competition Programming and Problem Solving. Each year, Carnegie Mellon fields two teams for participation in the ACM-ICPC Regional Programming Contest. During many recent years, one of those teams has earned the right to represent Carnegie Mellon at the ACM-ICPC World Finals.  This course is a vehicle for those who consistently and rigorously train in preparation for the contests to earn course credit for their effort and achievement.  Preparation involves the study of algorithms, the practice of programming and debugging, the development of test sets, and the growth of team, communication, and problem solving skills.  Neither the course grade nor the number of units earned are dependent on ranking in any contest.  Students are not required to earn course credit to participate in practices or to compete in ACM-ICPC events."
caltech_CS 151,"Complexity Theory. This course describes a diverse array of complexity classes that are used to classify problems according to the computational resources (such as time, space, randomness, or parallelism) required for their solution. The course examines problems whose fundamental nature is exposed by this framework, the known relationships between complexity classes, and the numerous open problems in the area."
psu_CMPSC 463,"Design and Analysis of Algorithms. Recurrences, algorithms design techniques, searching, sorting, selection, graph algorithms, NP-completeness, approximation algorithms, local optimization algorithms."
mit_6.551,"Acoustics of Speech and Hearing. Provides background for understanding how the acoustics and mechanics of the speech production and auditory systems define what sounds we are capable of producing and what sounds we can sense. Particular focus on the acoustic cues used in determining the direction of a sound source; the mechanisms involved in speech production; the mechanisms used by the auditory system to transduce and analyze sounds; and sound perception (absolute detection, discrimination, masking, and auditory frequency selectivity). 4 Engineering Design Points."
caltech_CS/EE 145,"Projects in Networking. Students are expected to execute a substantial project in networking, write up a report describing their work, and make a presentation."
psu_CMPSC 444,"Secure Programming. Secure software design principles/practice, common threats, applied cryptography, trust management, input validation, OS-/programming language- specific issues, software validation."
illinois_CS 422,Programming Language Design. Exploration of major language design paradigms using imperative and functional programming as unifying themes. Tools include both practical language processor construction and theoretical models. 3 undergraduate hours. 3 or 4 graduate hours. 
mit_6.732,"Physics of Solids. Continuation of 6.730 emphasizing applications-related physical issues in solids. Topics: electronic structure and energy band diagrams of semiconductors, metals, and insulators; Fermi surfaces; dynamics of electrons; classical diffusive transport phenomena such as electrical and thermal conduction and thermoelectric phenomena; quantum transport in tunneling and ballistic devices; optical properties of metals, semiconductors, and insulators; photon-lattice interactions; optical devices based on interband and intersubband transitions; magnetic properties of solids; exchange energy and magnetic ordering; magneto-oscillatory phenomena; quantum Hall effect; superconducting phenomena and simple models."
psu_CMPSC 457,"Computer Graphics Algorithms. Graphics systems/hardware, color models, transformations, projections, clipping, hidden line/surface removal, aliasing, parametric curves/surfaces, 3D modeling animation."
caltech_CS 150,"Probability and Algorithms. Elementary randomized algorithms and algebraic bounds in communication, hashing, and identity testing. Game tree evaluation. Topics may include randomized parallel computation; independence, k-wise independence and derandomization; rapidly mixing Markov chains; expander graphs and their applications; clustering algorithms."
mit_6.033,"Computer System Engineering. Topics on the engineering of computer software and hardware systems: techniques for controlling complexity; strong modularity using client-server design, operating systems; performance, networks; naming; security and privacy; fault-tolerant systems, atomicity and coordination of concurrent activities, and recovery; impact of computer systems on society. Case studies of working systems and readings from the current literature provide comparisons and contrasts. Two design projects. Students engage in extensive written communication exercises. 4 Engineering Design Points."
stanford_CS 261,"Optimization and Algorithmic Paradigms. Algorithms for network optimization: max-flow, min-cost flow, matching, assignment, and min-cut problems. Introduction to linear programming. Use of LP duality for design and analysis of algorithms. Approximation algorithms for NP-complete problems such as Steiner Trees, Traveling Salesman, and scheduling problems. Randomized algorithms. Introduction to online algorithms."
caltech_CS 176,"Introduction to Computer Graphics Research. The course will go over recent research results in computer graphics, covering subjects from mesh processing (acquisition, compression, smoothing, parameterization, adaptive meshing), simulation for purposes of animation, rendering (both photo- and nonphotorealistic), geometric modeling primitives (image based, point based), and motion capture and editing. Other subjects may be treated as they appear in the recent literature. The goal of the course is to bring students up to the frontiers of computer graphics research and prepare them for their own research."
mit_6.830,"Database Systems. Topics related to the engineering and design of database systems, including data models; database and schema design; schema normalization and integrity constraints; query processing; query optimization and cost estimation; transactions; recovery; concurrency control; isolation and consistency; distributed, parallel and heterogeneous databases; adaptive databases; trigger systems; pub-sub systems; semi structured data and XML querying. Lecture and readings from original research papers. Semester-long project and paper. Students taking graduate version complete different assignments. 4 Engineering Design Points."
cmu_15-418,"Parallel Computer Architecture and Programming. The fundamental principles and engineering tradeoffs involved in designing modern parallel computers, as well as the programming techniques to effectively utilize these machines. Topics include naming shared data, synchronizing threads, and the latency and bandwidth associated with communication. Case studies on shared-memory, message-passing, data-parallel and dataflow machines will be used to illustrate these techniques and tradeoffs. Programming assignments will be performed on one or more commercial multiprocessors, and there will be a significant course project."
mit_6.833,"The Human Intelligence Enterprise. Analyzes seminal work directed at the development of a computational understanding of human intelligence, such as work on learning, language, vision, event representation, commonsense reasoning, self reflection, story understanding, and analogy. Reviews visionary ideas of Turing, Minsky, and other influential thinkers. Examines the implications of work on brain scanning, developmental psychology, and cognitive psychology. Emphasis on discussion and analysis of original papers. Requires the completion of additional exercises and a substantial term project."
maryland_CMSC 131,Object-Oriented Programming I. Introduction to programming and computer science. Emphasizes understanding and implementation of applications using object-oriented techniques. Develops skills such as program design and testing as well as implementation of programs using a graphical IDE. Programming done in Java.
psu_CSE 565,Algorithm Design and Analysis. An introduction to algorithmic design and analysis.
mit_6.376,"Bioelectronics. Comprehensive introduction to analog microelectronic design with an emphasis on ultra-low-power electronics, biomedical electronics, and bio-inspired electronics. Device physics of the MOS transistor, including subthreshold operation and scaling to nanometer processes. Ultra-low-noise, RF, sensor, actuator, and feedback circuits. System examples vary from year to year and include implantable and noninvasive biomedical systems, circuits inspired by neurobiology or cell biology, micromechanical systems (MEMS), and biological sensing and actuating systems. Class project involves a complete design of a VLSI chip, including layout, verification, design-rule checking, and SPICE simulation. 8 Engineering Design Points."
msu_CSE 131,Technical Computing and Problem Solving. Use of computing systems for technical problem solving in engineering and science.
mit_6.301,"Solid-State Circuits. Analysis and design of transistor circuits, based directly on the semiconductor physics and transistor circuit models developed in 6.012. High-frequency and low-frequency design calculations and simulation of multistage transistor circuits. Trans-linear circuits. Introduction to operational-amplifier design and application. Some previous laboratory experience assumed. 4 Engineering Design Points."
stanford_CS 167,"Readings in Algorithms. Recent research in the design and analysis of algorithms.  Readings cover both classical and emerging topics, such as: computational models for massive data sets; data privacy; dimensionality reduction; exact and approximate algorithms for NP-hard problems; graph algorithms; hashing; online learning; search trees; streaming and sketching.  Students are expected to respond to research papers, deliver an oral presentation, and complete a reading or programming project.  Limited enrollment; preference given to undergraduates."
psu_CSE 545,Network Security. Advanced methods and technologies for network security.
iowa_CS:5520,"Advanced Computer Graphics. Topics such as global illumination and rendering; volume rendering; animation; curves and surfaces, advanced modeling and mapping techniques; graphics hardware; real‑time graphics for virtual environments. "
caltech_CS 4,"Fundamentals of Computer Programming. This course gives students the conceptual background necessary to construct and analyze programs, which includes specifying computations, understanding evaluation models, and using major programming language constructs (functions and procedures, conditionals, recursion and looping, scoping and environments, compound data, side effects, higher-order functions and functional programming, and object-oriented programming). It emphasizes key issues that arise in programming and in computation in general, including time and space complexity, choice of data representation, and abstraction management. This course is intended for students with some programming background who want a deeper understanding of the conceptual issues involved in computer programming."
stanford_CS 110,"Principles of Computer Systems. Principles and practice of engineering of computer software and hardware systems. Topics include: techniques for controlling complexity; strong modularity using client-server design, virtual memory, and threads; networks; atomicity and coordination of parallel activities; security, and encryption; and performance optimizations."
iowa_CS:4980,Topics in Computer Science II. Complements material in other courses. 
illinois_CS 544,"Optimiz in Computer Vision. Applications of continuous and discrete optimization to problems in computer vision and machine learning, with particular emphasis on large-scale algorithms and effective approximations: gradient-based learning; Newton's method and variants, applied to structure from motion problems; the augmented Lagrangian method and variants; interior-point methods; SMO and other specialized algorithms for support vector machines; flows and cuts as examples of primal-dual methods; dynamics programming, hidden Markov models, and parsing: 0-1 quadratic forms, max-cut, and Markov random-fields solutions. "
psu_CMPSC 470,"Compiler Construction. Compiler design and implementation; scanning, parsing, semantic analysis, optimization (including static analysis), code generation, garbage collection, and error detection."
illinois_CS 511,"Advanced Data Management. Advanced concepts in data management and information system design and implementation, and recent developments in the field. 1) Relational roots, objects and extensibility, query languages, data indexing, query processing, transaction processing, benchmarks, and 2) semi-structured data and unstructured data, information extraction, information integration, web search and mining, and other emerging directions in the field. "
illinois_CS 533,Parallel Computer Architecture. Theoretical aspects of parallel and pipeline computation; time and processor bounds on classes of computations; data alignment network speed and cost bounds; conflict-free access memories; overall computer system ideas. Same as CSE 522. 
mit_6.872,"Biomedical Computing. Analyzes computational needs of clinical medicine, reviews systems and approaches that have been used to support those needs, and the relationship between clinical data and gene and protein measurements. Topics: the nature of clinical data; architecture and design of healthcare information systems; privacy and security issues; medical expert systems; introduction to bioinformatics. Case studies and guest lectures describe contemporary systems and research projects. Term project using large clinical and genomic data sets integrates classroom topics. 6 Engineering Design Points."
illinois_CS 512,"Data Mining Principles. An advanced course on principles and algorithms of data mining. Data cleaning and integration; descriptive and predictive mining; mining frequent, sequential, and structured patterns; clustering, outlier analysis and fraud detection; stream data, web, text, and biomedical data mining; security and privacy in data mining; research frontiers. "
mit_6.858,"Computer Systems Security. Design and implementation of secure computer systems. Lectures cover attacks that compromise security as well as techniques for achieving security, based on recent research papers. Topics include operating system security, privilege separation, capabilities, language-based security, cryptographic network protocols, trusted hardware, and security in web applications and mobile phones. Labs involve implementing and compromising a web application that sandboxes arbitrary code, and a group final project. 4 Engineering Design Points."
iowa_CS:4340,"Limits of Computation. Turing machines, undecidability and complexity: reductions, Cook's theorem and NP‑completeness, approximation algorithms and randomized algorithms. "
maryland_CMSC 417,"Computer Networks. Computer networks and architectures. The OSI model including discussion and examples of various network layers. A general introduction to existing network protocols. Communication protocol specification, analysis, and testing."
illinois_CS 242,Programming Studio. Intensive programming lab intended to strengthen skills in programming. 
caltech_CMS/CS/CNS/EE 155,"Machine Learning Data Mining. This course will cover popular methods in machine learning and data mining, with an emphasis on developing a working understanding of how to apply these methods in practice. This course will also cover core foundational concepts underpinning and motivating modern machine learning and data mining approaches. This course will be research-oriented, and will cover recent research developments."
maryland_CMSC 423,"Bioinformatic Algorithms, Databases, and Tools. An introduction to the main algorithms, databases, and tools used in bioinformatics. Topics may include assembly and analysis of genome sequences, reconstructing evolutionary histories, predicting protein structure, and clustering of biological data. Use of scripting languages to perform analysis tasks on biological data. No prior knowledge of biology is assumed."
msu_CSE 498,"Collaborative Design (W). Development of a comprehensive software and/or hardware solution to a problem in a team setting with emphasis on working with a client. Participation in a design cycle including specification, design, implementation, testing, maintenance, and documentation. Issues of professionalism, ethics, and communication."
princeton_COS  429,"Computer Vision. This course is an introduction to the concepts of 2D and 3D computer vision. It surveys a wide range of topics from level-level vision to high-level recognition. We will discuss concepts such as filtering and edge detection; cameras and shape reconstruction; segmentation and clustering; optical flow and tracking; object recognition; motion recognition; statistical modeling of visual data, etc. Throughout the course, there will also be examination of aspects of human vision and perception that guide and inspire computer vision techniques."
cmu_15-355,"Modern Computer Algebra. The goal of this course is to investigate the relationship between algebra  and computation. The course is designed to expose students to algorithms  used for symbolic computation, as well as to the concepts from modern  algebra which are applied to the development of these algorithms. This  course provides a hands-on introduction to many of the most important ideas  used in symbolic mathematical computation, which involves solving system of  polynomial equations (via Groebner bases), analytic integration, and solving  linear difference equations. Throughout the course the computer algebra system Mathematica will be used for computation."
mit_6.820,"Foundations of Program Analysis. Presents major principles and techniques for program analysis. Includes formal semantics, type systems and type-based program analysis, abstract interpretation and model checking and synthesis. Emphasis on Haskell and Ocaml, but no prior experience in these languages is assumed. Student assignments include implementing of techniques covered in class, including building simple verifiers."
mit_6.806,"Advanced Natural Language Processing. Introduces the study of human language from a computational perspective, including syntactic, semantic and discourse processing models. Emphasizes machine learning methods and algorithms. Uses these methods and models in applications such as syntactic parsing, information extraction, statistical machine translation, dialogue systems, and summarization. Students taking graduate version complete additional assignments."
iowa_CS:2210,"Discrete Structures. Mathematical methods used in computer science, including logic, proof techniques (with induction), functions, relations, algorithm analysis, recurrence relations, counting methods, combinatorics, graphs, trees. "
mit_6.731,"Semiconductor Optoelectronics: Theory and Design. Focuses on the physics of the interaction of photons with semiconductor materials. Uses the band theory of solids to calculate the absorption and gain of semiconductor media; and uses rate equation formalism to develop the concepts of laser threshold, population inversion, and modulation response. Presents theory and design for photodetectors, solar cells, modulators, amplifiers, and lasers. Introduces noise models for semiconductor devices, and applications of optoelectronic devices to fiber optic communications."
stanford_CS 149,"Parallel Computing. This course is an introduction to parallelism and parallel programming.  Most new computer architectures are parallel; programming these machines requires knowledge of the basic issues of and techniques for writing parallel software. Topics:  varieties of parallelism in current hardware (e.g., fast networks, multicore, accelerators such as GPUs, vector instruction sets), importance of locality, implicit vs. explicit parallelism, shared vs. non-shared memory, synchronization mechanisms (locking, atomicity, transactions, barriers), and parallel programming models (threads, data parallel/streaming, futures, SPMD, message passing, SIMT, transactions, and nested parallelism).  Significant parallel programming assignments will be given as homework.  The course is open to students who have completed the introductory CS course sequence through 110 and have taken CS 143."
mit_6.552,"Signal Processing by the Auditory System: Perception. Studies information processing performance of the human auditory system in relation to current physiological knowledge. Examines mathematical models for the quantification of auditory-based behavior and the relation between behavior and peripheral physiology, reflecting the tono-topic organization and stochastic responses of the auditory system. Mathematical models of psychophysical relations, incorporating quantitative knowledge of physiological transformations by the peripheral auditory system."
maryland_CMSC 426,"Image Processing. An introduction to basic techniques of analysis and manipulation of pictorial data by computer. Image input/output devices, image processing software, enhancement, segmentation, property measurement, Fourier analysis. Computer encoding, processing, and analysis of curves."
stanford_CS 327A,"Advanced Robotic Manipulation. Advanced control methodologies and novel design techniques for complex human-like robotic and bio mechanical systems. Class covers the fundamentals in operational space dynamics and control, elastic planning, human motion synthesis. Topics include redundancy, inertial properties, haptics, simulation, robot cooperation, mobile manipulation, human-friendly robot design, humanoids and whole-body control. Additional topcs in emerging areas are presented by groups of students at the end-of-quarter mini-symposium."
cmu_15-466,"Computer Game Programming. The goal of the course is two-fold. The first goal is to teach students some of the higher-level techniques that are necessary to implement interesting computer games. In particular, a large emphasis will be on game AI. The class will also cover such topics as game networking, scheduling of tasks in computationally intensive games, and game design. The class will also briefly cover few selected topics such as collision detection and physically-based animation that are good to know even if one is developing games using a game engine. The second goal of the class is to get students familiar with programming games on various platforms using state-of-the-art game engines. To this end, the course will have a heavy programming focus. It will have a number of projects requiring students to apply the learned material to develop games using Unity 3D game engine. The students will develop games that run on a standalone PC, games that run on an Android platform and games that work in a multi-user mode.  In addition to learning the material and learning how to use game engines, the projects will provide students with portfolios of games they have developed. Such a portfolio is important in getting a job in game industry."
stanford_CS 229,"Machine Learning. Topics: statistical pattern recognition, linear and non-linear regression, non-parametric methods, exponential family, GLMs, support vector machines, kernel methods, model/feature selection, learning theory, VC dimension, clustering, density estimation, EM, dimensionality reduction, ICA, PCA, reinforcement learning and adaptive control, Markov decision processes, approximate dynamic programming, and policy search."
mit_6.869,"Advances in Computer Vision. Advanced topics in computer vision with a focus on the use of machine learning techniques and applications in graphics and human-computer interface. Covers image representations, texture models, structure-from-motion algorithms, Bayesian techniques, object and scene recognition, tracking, shape modeling, and image databases. Applications may include face recognition, multimodal interaction, interactive systems, cinematic special effects, and photorealistic rendering. Covers topics complementary to 6.866. Students taking graduate version complete additional assignments."
psu_CMPSC 471,"Introduction to Compiler Construction. Design and implementation of compilers; lexical analysis, parsing, semantic actions, optimization, and code generation."
msu_CSE 473,"Fundamentals of 3D Game Development. Fundamental algorithms and techniques for 3D computer game development including geometric transformations, procedural and keyframe animation, models and scene graphs, skeletal animation and skinned characters, illuminations and shading, collision detection, and level of detail."
cmu_15-440,"Distributed Systems. The goals of this course are twofold: First, for students to gain an understanding of the principles and techniques behind the design of distributed systems, such as locking, concurrency, scheduling, and communication across the network. Second, for students to gain practical experience designing, implementing, and debugging real distributed systems.  The major themes this course will teach include scarcity, scheduling, concurrency and concurrent programming, naming, abstraction and modularity, imperfect communication and other types of failure, protection from accidental and malicious harm, optimism, and the use of instrumentation and monitoring and debugging tools in problem solving. As the creation and management of software systems is a fundamental goal of any undergraduate systems course, students will design, implement, and debug large programming projects.   As a consequence, competency in both the C and Java programming languages is required."
cmu_15-455,"Undergraduate Complexity Theory. Complexity theory is the study of how much of a resource (such as time, space, parallelism, or randomness) is required to perform some of the computations that interest us the most. In a standard algorithms course, one concentrates on giving resource efficient methods to solve interesting problems. In this course, we concentrate on techniques that prove or suggest that there are no efficient methods to solve many important problems.  We will develop the theory of various complexity classes, such as P, NP, co-NP, PH, #P, PSPACE, NC, AC, L, NL, UP, RP, BPP, IP, and PCP. We will study techniques to classify problems according to our available taxonomy. By developing a subtle pattern of reductions between classes we will suggest an (as yet unproven!) picture of how by using limited amounts of various resources, we limit our computational power."
mit_6.036,"Introduction to Machine Learning. Introduces principles, algorithms, and applications of machine learning from the point of view of modeling and prediction; formulation of learning problems; representation, over-fitting, generalization; clustering, classification, probabilistic modeling; and methods such as support vector machines, hidden Markov models, and Bayesian networks."
stanford_CS 144,"Introduction to Computer Networking. Principles and practice. Structure and components of computer networks, packet switching, layered architectures. Applications: web/http, voice-over-IP, p2p file sharing and socket programming. Reliable transport: TCP/IP, reliable transfer, flow control, and congestion control. The network layer: names and addresses, routing. Local area networks: ethernet and switches. Wireless networks and network security."
purdue_CS 61500,"Numerical Methods For Partial Differential Equations I. (MA 61500) Finite element method for elliptic partial differential equations; weak formulation; finite-dimensional approximations; error bounds; algorithmic issues; solving sparse linear systems; finite element method for parabolic partial differential equations; backward difference and Crank-Nicolson time-stepping; introduction to finite difference methods for elliptic, parabolic, and hyperbolic equations; stability, consistency, and convergence; discrete maximum principles."
illinois_CS 450,"Numerical Analysis. Linear system solvers, optimization techniques, interpolation and approximation of functions, solving systems of nonlinear equations, eigenvalue problems, least squares, and quadrature; numerical handling of ordinary and partial differential equations. Same as CSE 401, ECE 491, and MATH 450. 3 undergraduate hours. 3 or 4 graduate hours. Credit is not given for both CS 450 and CS 457. "
illinois_CS 526,"Advanced Compiler Construction. Incremental and interactive compiling, error correction, code optimization, models of code generators. "
psu_CSE 511,"Operating Systems Design. Concurrent programming; design of I/O subsystem, memory management, and user interface; kernel design; deadlocks, protection and security; case studies."
illinois_CS 446,"Machine Learning. Theory and basic techniques in machine learning. Major theoretical paradigms and key concepts developed in machine learning in the context of applications such as natural language and text processing, computer vision, data mining, adaptive computer systems and others. Review of several supervised and unsupervised learning approaches: methods for learning linear representations; on-line learning, Bayesian methods; decision-trees; features and kernels; clustering and dimensionality reduction. 3 undergraduate hours. 3 or 4 graduate hours. "
stanford_CS 145,"Introduction to Databases. The course covers database design and the use of database management systems for applications. It includes extensive coverage of the relational model, relational algebra, and SQL.The course includes database design and relational design principles based on dependencies and normal forms. Many additional key database topics from the design and application-building perspective are also covered: indexes, views, transactions, authorization, integrity constraints, triggers, on-line analytical processing (OLAP), JSON, and emerging NoSQL systems. Class time will include guest speakers from industry and additional advanced topics as time and class interest permits."
mit_6.251,Introduction to Mathematical Programming. Introduction to linear optimization and its extensions emphasizing both methodology and the underlying mathematical structures and geometrical ideas. Covers classical theory of linear programming as well as some recent advances in the field. Topics: simplex method; duality theory; sensitivity analysis; network flow problems; decomposition; integer programming; interior point algorithms for linear programming; and introduction to combinatorial optimization and NP-completeness.
stanford_CS 251P,Bitcoin & Crypto Currencies Lab. For advanced undergraduates and for graduate students. Intensive version of CS251 for students interested in practice as well as theory. Includes lab section of course which includes hardware work with Bitcoin mining chips and software project involving the use of Bitcoin for micro payments. Co-requisite: CS251 (enroll in both to take CS251P).
psu_CMPSC 122,"Intermediate Programming. Object-oriented programming, recursion, fundamental data structures (including stacks, queues, linked lists, hash tables, trees, and graphs), the basics of algorithmic analysis, and an introduction to the principles of language translation."
iowa_CS:5810,"Formal Methods in Software Engineering. Models, methods, and their application in all phases of software engineering process; specification methods; verification of consistency, completeness of specifications; verification using tools. "
maryland_CMSC 132,"Object-Oriented Programming II. Introduction to use of computers to solve problems using software engineering principles. Design, build, test, and debug medium -size software systems and learn to use relevant tools. Use object-oriented methods to create effective and efficient problem solutions. Use and implement application programming interfaces (APIs). Programming done in Java."
mit_6.951,Graduate 6-A Internship. Provides academic credit for a graduate assignment of graduate 6-A students at companies affiliated with the department's 6-A internship program.
psu_CMPSC 312,"Computer Organization and Architecture. Data representation, digital logic, instruction set/control logic, machine/ assembly languages, advanced architectures, memory hierarchy, I/O devices, overall system design."
cmu_15-463,"Computational Photography. Computational Photography is an emerging new field created by the  convergence of computer graphics, computer vision and  photography. Its role is to overcome the limitations of the  traditional camera by using computational techniques to produce a  richer, more vivid, perhaps more perceptually meaningful  representation of our visual world.    The aim of this advanced undergraduate course is to study ways in  which samples from the real world (images and video) can be used to  generate compelling computer graphics imagery. We will learn how to  acquire, represent, and render scenes from digitized photographs.  Several popular image-based algorithms will be presented, with an  emphasis on using these techniques to build practical systems. This  hands-on emphasis will be reflected in the programming assignments, in  which students will have the opportunity to acquire their own images  of indoor and outdoor scenes and develop the image analysis and  synthesis tools needed to render and view the scenes on the computer."
caltech_CS 142,Distributed Computing. Programming distributed systems. Mechanics for cooperation among concurrent agents. Programming sensor networks and cloud computing applications. Applications of machine learning and statistics by using parallel computers to aggregate and analyze data streams from sensors.
mit_6.854,"Advanced Algorithms. First-year graduate subject in algorithms. Emphasizes fundamental algorithms and advanced methods of algorithmic design, analysis, and implementation. Surveys a variety of computational models and the algorithms for them. Data structures, network flows, linear programming, computational geometry, approximation algorithms, online algorithms, parallel algorithms, external memory, streaming algorithms."
cmu_15-349,"Introduction to Computer and Network Security. This course is ONLY offered at Carnegie Mellon in Qatar.    This course is meant to offer Computer Science undergraduate students in  their junior or senior year a broad overview of the field of computer  security. Students will learn the basic concepts in computer security  including software vulnerability analysis and defense, networking and  wireless security, applied cryptography, as well as ethical, legal,  social and economic facets of security. Students will also learn the  fundamental methodology for how to design and analyze security critical  systems."
cmu_15-381,"Artificial Intelligence: Representation and Problem Solving. This course is about the theory and practice of Artificial Intelligence. We will study modern techniques for computers to represent task-relevant information and make intelligent (i.e. satisficing or optimal) decisions towards the achievement of goals. The search and problem solving methods are applicable throughout a large range of industrial, civil, medical, financial, robotic, and information systems.  We will investigate questions about AI systems such as: how to represent knowledge, how to effectively generate appropriate sequences of actions and how to search among alternatives to find optimal or near-optimal solutions.  We will also explore how to deal with uncertainty in the world, how to learn from experience, and how to learn decision rules from data.  We expect that by the end of the course students will have a thorough understanding of the algorithmic foundations of AI, how probability and AI are closely interrelated, and how automated agents learn.  We also expect students to acquire a strong appreciation of the big-picture aspects of developing fully autonomous intelligent agents.  Other lectures will introduce additional aspects of AI, including natural language processing, web-based search engines, industrial applications, autonomous robotics, and economic/game-theoretic decision making."
iowa_CS:2111,Programming Practice. Review of introductory Python programming concepts taught in CS:1210 and CS:2110; enhance mastery of introductory programming. 
purdue_CS 55500,"Cryptography. (CSCI 55500) Concepts and principles of cryptography and data security. Cryptography (secret codes): principles of secrecy systems; classical cryptographic systems, including Vigenere and Vernam ciphers; the Data Encryption Standard (DES); public-key encryption; privacy-enhanced email; digital signatures. Proprietary software protection; information theory and number theory; complexity bounds on encryption; key escrow; traffic analysis; attacks against encryption; basic legal issues; e-commerce; and the role of protocols."
mit_6.829,"Computer Networks. Topics on the engineering and analysis of network protocols and architecture, including architectural principles for designing heterogeneous networks; transport protocols; Internet routing; router design; congestion control and network resource management; wireless networks; network security; naming; overlay and peer-to-peer networks. Readings from original research papers. Semester-long project and paper. 4 Engineering Design Points."
msu_CSE 471,"Media Processing and Multimedia Computing. Basic operations for processing images, video, and audio. Devices for input and output. Data formats and compression. Tools for processing images and sound. Multimedia authoring tools. Applications."
msu_CSE 460,"Computability and Formal Language Theory. Formal models of computation such as finite state automata, pushdown automata and Turing machines. Formal definitions of languages, problems, and language classes including recursive, recursively enumerable, regular, and context free languages. The relationships among various models of computation, language classes, and problems. Church's thesis and the limits of computability. Proofs of program properties including correctness."
iowa_CS:5620,"Distributed Systems and Algorithms. Models of distributed systems, program correctness—safety and liveness properties, causality, logical and vector clocks, mutual exclusion, distributed snapshot, leader election, distributed algorithms for graph‑theoretic problems, fault‑tolerance—masking versus nonmasking types, checkpointing, stabilization, consensus—byzantine generals problem, fault‑tolerant broadcast and multicast, management of replicated data. "
mit_6.441,"Information Theory. Mathematical definitions of information measures, convexity, continuity, and variational properties. Lossless source coding; variable-length and block compression; Slepian-Wolf theorem; ergodic sources and Shannon-McMillan theorem. Hypothesis testing, large deviations and I-projection. Fundamental limits of block coding for noisy channels: capacity, dispersion, finite blocklength bounds. Coding with feedback. Joint source-channel problem. Rate-distortion theory, vector quantizers. Advanced topics include Gelfand-Pinsker problem, multiple access channels, broadcast channels (depending on available time)."
stanford_CS 249A,"Object-Oriented Programming from a Modeling and Simulation Perspective. Topics: large-scale software development approaches for complex applications, class libraries and frameworks; encapsulation, use of inheritance and dynamic dispatch, design of interfaces and interface/implementation separation, exception handling, smart pointers and reference management, minimalizing dependencies and value-oriented programming. Inheritance: when and why multiple inheritance naming, directories, manager, and disciplined use of design patterns including functors, event notification and iterators."
stanford_CS 106X,Programming Abstractions. Intensive version of 106B for students with a strong programming background interested in a rigorous treatment of the topics at an accelerated pace. Additional advanced material and more challenging projects.
stanford_CS 154,"Introduction to Automata and Complexity Theory. This course provides a mathematical introduction to the following questions: What is computation? Given a computational model, what problems can we hope to solve in principle with this model? Besides those solvable in principle, what problems can we hope to efficiently solve? In many cases we can give completely rigorous answers; in other cases, these questions have become major open problems in computer science and mathematics. By the end of this course, students will be able to classify computational problems in terms of their computational complexity (Is the problem regular? Not regular? Decidable? Recognizable? Neither? Solvable in P? NP-complete? PSPACE-complete?, etc.). Students will gain a deeper appreciation for some of the fundamental issues in computing that are independent of trends of technology, such as the Church-Turing Thesis and the P versus NP problem."
psu_CMPSC 201,"Programming for Engineers with C++. Development and implementation of algorithms in a procedure-oriented language, with emphasis on numerical methods for engineering problems.  A student may receive credit for only one of the following courses: CMPSC 101, 102, 200, 201, or 202."
stanford_CS 190,"Software Design Studio. This course will teach the art of software design: how to decompose large complex systems into classes that can be implemented and maintained easily. Topics include information hiding, thick classes, API design, managing complexity, and how to write in-code documentation. The class will involve significant system software implementation and will use an iterative approach consisting of implementation, review, and revision. The course will be taught in a studio format with in-class discussions and code reviews in addition to lectures."
illinois_CS 225,"Data Structures. Data abstractions: elementary data structures (lists, stacks, queues, and trees) and their implementation using an object-oriented programming language. Solutions to a variety of computational problems such as search on graphs and trees. Elementary analysis of algorithms. "
illinois_CS 573,"Algorithms. NP-completeness, design and analysis techniques, approximation algorithms, randomized algorithms, combinatorial optimization, linear programming. Intended for graduate students in Computer Science. Same as CSE 515. "
maryland_CMSC 733,"Computer Processing of Pictorial Information. Input, output, and storage of pictorial information. Pictures as information sources, efficient encoding, sampling, quantization, approximation. Position-invariant operations on pictures, digital and optical implementations, the pax language, applications to matched and spatial frequency filtering. Picture quality, image enhancement and image restoration. Picture properties and pictorial pattern recognition. Processing of complex pictures; figure extraction, properties of figures. Data structures for pictures description and manipulation; picture languages. Graphics systems for alphanumeric and other symbols, line drawings of two- and three-dimensional objects, cartoons and movies."
psu_CMPSC 430,"Database Design. Relational database model, query languages, integrity, reliability, normal forms for design."
stanford_CS 196,"Computer Consulting. Focus is on Macintosh and Windows operating system maintenance and troubleshooting through hardware and software foundation and concepts. Topics include operating systems, networking, security, troubleshooting methodology with emphasis on Stanford's computing environment. Not a programming course."
cmu_15-369,"Special Topics: Perceptual Computing. This course is ONLY offered at Carnegie Mellon in Qatar.  What can today's computers see, hear, and feel?  This project-based course is designed to provide students exposure to the state-of-the-art in machine perception and the algorithms behind them.  Student groups will design a perceptual computing project around Intel's Creative Camera or Microsoft's Kinect. Students will learn to use tools in face detection and recognition, hand and finger tracking, and speech recognition, along with algorithms to make decisions based on these input modalities."
illinois_CS 466,"Introduction to Bioinformatics. Algorithmic approaches in bioinformatics: (i) biological problems that can be solved computationally (e.g., discovering genes, and interactions among different genes and proteins); (ii) algorithmic techniques with wide applicability in solving these problems (e.g., dynamic programming and probabilistic methods); (iii) practical issues in translating the basic algorithmic ideas into accurate and efficient tools that biologists may use. 3 undergraduate hours. 3 or 4 graduate hours. "
mit_6.637,"Optical Signals, Devices, and Systems. Principles of operation and applications of devices and systems for optical signal generation, transmission, detection, storage, processing and display. Topics include review of the basic properties of electromagnetic waves; coherence and interference; diffraction and holography; Fourier optics; coherent and incoherent imaging and signal processing systems; optical properties of materials; lasers and LEDs; electro-optic and acousto-optic light modulators; photorefractive and liquid-crystal light modulation; spatial light modulators and displays; optical waveguides and fiber-optic communication systems; photodetectors; 2-D and 3-D optical storage technologies; adaptive optical systems; role of optics in next-generation computers. Student research paper on a specific contemporary topic required. Recommended prerequisites: 6.007 or 8.03."
psu_CMPSC 475,"Applications Programming. Development of software for devices including smart phones, tablets, handheld units, and other general purpose computing platforms."
stanford_CS 205A,"Mathematical Methods for Robotics, Vision, and Graphics. Continuous mathematics background necessary for research in robotics, vision, and graphics. Possible topics: linear algebra; the conjugate gradient method; ordinary and partial differential equations; vector and tensor calculus."
mit_6.241,"Dynamic Systems and Control. Linear, discrete- and continuous-time, multi-input-output systems in control, related areas. Least squares and matrix perturbation problems. State-space models, modes, stability, controllability, observability, transfer function matrices, poles and zeros, and minimality. Internal stability of interconnected systems, feedback compensators, state feedback, optimal regulation, observers, and observer-based compensators. Measures of control performance, robustness issues using singular values of transfer functions. Introductory ideas on nonlinear systems. Recommended prerequisite: 6.302."
psu_CSE 552,"Numerical Solution of Partial Differential Equations. Finite difference methods for elliptic, parabolic, and hyperbolic differential equations; solutions techniques for discretized systems; finite element methods for elliptic problems."
illinois_CS 429,"Software Engineering II, ACP. Continuation of CS 427. Identical to CS 428 except for the additional writing component. See CS 428. 3 undergraduate hours. 3 graduate hours. "
msu_CSE 251,Programming in C. Programming in the C language. Data and control. Compiling and linking.
illinois_CS 579,"Computational Complexity. Turing machines; determinism and non-determinism; time and space hierarchy theorems; speed-up and tape compression; Blum axioms; structure of complexity classes NP, P, NL, L, and PSPACE; complete problems; randomness and complexity classes RP, RL, and BPP; alternation, polynomial-time hierarchy; circuit complexity, parallel complexity, NC, and RNC; relativized computational complexity; time-space trade-offs. Same as ECE 579. "
msu_CSE 425,Introduction to Computer Security. Theory and practice of security engineering.  Security protocols. Cryptography and cryptanalysis.  Smartcards.  Network security and intrusion detection.  Common system attacks.
psu_CSE 532,"Multiprocessor Architecture. Fundamental structures of multiprocessors; interprocess communications, system deadlocks and protection, scheduling strategies, and parallel algorithms; example multiprocessor systems."
mit_6.824,"Distributed Computer Systems Engineering. Abstractions and implementation techniques for engineering distributed systems: remote procedure call, threads and locking, client/server, peer-to-peer, consistency, fault tolerance, and security. Readings from current literature. Individual laboratory assignments culminate in the construction of a fault-tolerant and scalable network file system. Programming experience with C/C++ required. 6 Engineering Design Points."
msu_CSE 450,"Translation of Programming Languages. Theory and practice of programming language translation. Languages, grammars and parsing. Lexical, syntactic and semantic analysis. Compile-time error handling. Code optimization and code generation."
mit_6.S04,"Special Subject: Fundamentals of Programming. Introduces fundamental concepts of programming. Designed to develop skills in applying basic methods from programming languages to abstract problems. Topics include programming and Python basics, computational concepts, software engineering, algorithmic techniques, data types, and recursion and tail recursion. Lab component will consist of software design, construction and implementation of design. Licensed for 2015-2016 by the Committee on Curricula. 6 Engineering Design Points."
msu_CSE 472,"Computer Graphics. Graphics systems. Two- and three-dimensional imaging geometry and transformations. Curve and surface design. Rendering, shading, color, and animation. Graphics programming."
mit_6.005,"Elements of Software Construction. Introduces fundamental principles and techniques of software development, i.e., how to write software that is safe from bugs, easy to understand, and ready for change. Topics include specifications and invariants; testing, test-case generation, and coverage; abstract data types and representation independence; design patterns for object-oriented programming; concurrent programming, including message passing and shared concurrency, and defending against races and deadlock; and functional programming with immutable data and higher-order functions. Includes weekly programming exercises and larger group programming projects. 12 Engineering Design Points."
stanford_CS 243,"Program Analysis and Optimizations. Program analysis techniques used in compilers and software development tools to improve productivity, reliability, and security. The methodology of applying mathematical abstractions such as graphs, fixpoint computations, binary decision diagrams in writing complex software, using compilers as an example. Topics include data flow analysis, instruction scheduling, register allocation, parallelism, data locality, interprocedural analysis, and garbage collection."
princeton_COS  340,Reasoning about Computation. An introduction to mathematical topics relevant to computer science. Combinatorics and probability will be covered in the context of computer science applications. The course will present a computer science approach to thinking and modeling through topics such as dealing with uncertainty in data and handling large data sets. Students will be introduced to fundamental concepts such as NP-completeness and cryptography that arise from the world view of efficient computation.
psu_CSE 536,Fault Tolerant Systems. Attributes of fault-tolerant systems and their definitions; realability and availability techniques; maintainability and testing techniques; practice of reliable system design.
illinois_CS 528,"Obj-Oriented Progrmg & Design. Principles of object-oriented design; design patterns; use and design of frameworks; reflection, refractoring, use of unit tests as specifications. "
iowa_CS:1110,"Introduction to Computer Science. Introduction to computer science and the study of algorithms; foundational ideas, computer organization, software concepts (e.g., networking, databases, security); programming concepts using Python. Recommendations: closed to students who have completed CS:2230 or a higher‑numbered computer science course."
mit_6.375,"Complex Digital Systems Design. Introduction to the design and implementation of large-scale digital systems using hardware description languages and high-level synthesis tools in conjunction with standard commercial electronic design automation (EDA) tools. Emphasizes modular and robust designs, reusable modules, correctness by construction, architectural exploration, meeting area and timing constraints, and developing functional field-programmable gate array (FPGA) prototypes. Extensive use of CAD tools in weekly labs serve as preparation for a multi-person design project on multi-million gate FPGAs. 12 Engineering Design Points."
stanford_CS 448J,"Concepts and Algorithms of Scientific and Visual Computing. This course covers a selection of fundamental concepts and algorithms for scientific and visual computing. Based on prior knowledge in basis calculus, linear algebra, numerical interpolation and optimization, this course introduces the concept of the phase space, variational principles, methods for ordinary and partial differential equations, Fourier analysis, and multi- scale modeling. The lecture is algorithmically oriented, aiming to enable the students to develop efficient solutions for practically relevant problems, based on solid theoretical foundations and mathematically precise modeling. It covers practical applications, like the simulation of rigid and deformable objects, fibers, fluids, molecular dynamics, signal/image analysis and processing, as well as wavelet-based modeling on different scales."
illinois_CS 427,"Software Engineering I. Software process, analysis and design. Software development paradigms, system engineering, function-based analysis and design, and object-oriented analysis and design. Course will use team-projects for hands-on exercises. Same as CSE 426. 3 undergraduate hours. 3 or 4 graduate hours. "
stanford_CS 155,"Computer and Network Security. For seniors and first-year graduate students. Principles of computer systems security. Attack techniques and how to defend against them. Topics include: network attacks and defenses, operating system security, application security (web, apps, databases), malware, privacy, and security for mobile devices. Course projects focus on building reliable code."
stanford_CS 194H,"User Interface Design Project. Advanced methods for designing, prototyping, and evaluating user interfaces to computing applications. Novel interface technology, advanced interface design methods, and prototyping tools. Substantial, quarter-long course project that will be presented in a public presentation."
mit_6.034,"Artificial Intelligence. Introduces representations, methods, and architectures used to build applications and to account for human intelligence from a computational point of view. Covers applications of rule chaining, constraint propagation, constrained search, inheritance, statistical inference, and other problem-solving paradigms. Also addresses applications of identification trees, neural nets, genetic algorithms, support-vector machines, boosting, and other learning paradigms. considers what separates human intelligence from that of other animals. 4 Engineering Design Points."
maryland_CMSC 451,"Design and Analysis of Computer Algorithms. Fundamental techniques for designing efficient computer algorithms, proving their correctness, and analyzing their complexity. General topics include sorting, selection, graph algorithms, and basic algorithm design paradigms (such as divide-and-conquer, dynamic programming and greedy algorithms), lower bounds and NP-completeness."
mit_6.857,"Network and Computer Security. Emphasis on applied cryptography and may include: basic notion of systems security, crypotographic hash functions, symmetric crypotography (one-time pad, stream ciphers, block ciphers), cryptanalysis, secret-sharing, authentication codes, public-key cryptography (encryption, digital signatures), public-key attacks, web browser security, biometrics, electronic cash, viruses, electronic voting, Assignments include a group final project. Topics may vary year to year."
illinois_CS 433,Computer System Organization. Computer system analysis and design. Organizational dependence on computations to be performed; speed and cost of parts and overall machines; instruction set design; pipeline and vector machines; memory hierarchy design. Same as CSE 422. 3 undergraduate hours. 3 or 4 graduate hours. 
psu_CSE 530,"Fundamentals of Computer Architecture. Advances in computer architecture, Pipelining, parallelism, and multiprocessing."
stanford_CS 476A,"Music, Computing, Design I: Art of Design for Computer Music. Creative design for computer music software. Programming, audiovisual design, as well as software design for musical tools, instruments, toys, and games. Provides paradigms and strategies for designing and building music software, with emphases on interactive systems, aesthetics, and artful product design. Course work includes several programming assignments and a ""design+implement"" final project."
maryland_CMSC 430,"Introduction to Compilers. Topics include lexical analysis, parsing, intermediate representations, program analysis, optimization, and code generation."
cmu_15-491,"Special Topic: CMRoboBits: Creating Intelligent Robots. Creating intelligent robots can be viewed as the integration of many  pieces - ""bits"" - ""RoboBits"". This course will teach students such  ""RoboBits"" for creating both single and groups of intelligent  robots, with perception, cognition, and action. Students in the  course work with real functional mobile robots, equipped with RGB  and RGB+D cameras, different types of actuation, namely wheeled and  legged robots, and computation onboard. Students learn effective  vision processing algorithms for object recognition, motion modeling  and planning, robot localization and planning algorithms, and  multi-robot communication for shared sensing and teamwork.  We will  further study cognitive architectures, learning, and human-robot  interaction. 15-491 is a PROJECT-BASED course, which runs in the  CORAL research lab in GHC 3201. The course has three major projects  with specific tasks that incrementally lead to the research and  development of complete intelligent robots. The projects are  decomposed in weekly tasks. The class meets twice a week, and the  students have access to the lab for further work as needed.  Evaluation is based on class participation, weekly progress, and  project reports, presentations, and outcomes."
iowa_CS:3910,"Informatics Project. Experience designing, implementing, documenting, and testing a system using appropriate software tools (e.g., a project working with an information management tool consisting of a database system with a Web‑based front end); typically done in small groups; capstone project for informatics majors. "
msu_CSE 477,"Web Application Architecture and Development. Fundamentals of World Wide Web (WWW) programming, including protocols, client-server interaction, markup languages, client- and server-side programming, databases, and remote procedure calls. Development of a WWW server and WWW sites with browser-based interfaces to remote databases. Students will incorporate scaling, throughput, and latency considerations in the development of widely-distributed systems."
mit_6.815,"Digital and Computational Photography. Presents fundamentals and applications of hardware and software techniques used in digital and computational photography, with an emphasis on software methods. Provides sufficient background to implement solutions to photographic challenges and opportunities. Topics include cameras and image formation, image processing and image representations, high-dynamic-range imaging, human visual perception and color, single view 3-D model reconstruction, morphing, data-rich photography, super-resolution, and image-based rendering. Students taking graduate version complete additional assignments. 6 Engineering Design Points."
msu_CSE 101,"Computing Concepts and Competencies. Core concepts in computing including information storage, retrieval, management, and representation. Applications from specific disciplines. Applying core concepts to design and implement solutions to various focal problems, using hardware, multimedia software, communication and networks."
msu_CSE 201,"Fundamentals of Information Technology. Digital representation of objects such as numbers, signals, and 3-dimensional shapes. Algorithms that operate on digital objects. Computer communications and the Internet. Computer security and web services."
caltech_CS 153,"Current Topics in Theoretical Computer Science. May be repeated for credit, with permission of the instructor. Students in this course will study an area of current interest in theoretical computer science. The lectures will cover relevant background material at an advanced level and present results from selected recent papers within that year’s chosen theme. Students will be expected to read and present a research paper."
stanford_CS 92SI,"Hap.py Coder: The Python Programming Language. The fundamentals and contemporary usage of the Python programming language. Primary focus on developing best practices in writing Python and exploring the extensible and unique parts of Python that make it such a powerful scripting language. Topics include: data structures (e.g. lists and dictionaries), and characteristic pythonic conventions like anonymous functions, iterables, and powerful built-ins (e.g. map, filter, zip). Time permitting, we will also cover object-oriented design, modules, (e.g. request, itertools), and modern Python-based web frameworks."
psu_CMPSC 474,Operating System & Systems Programming. Operating Systems overview and principles; processes and signals; concurrency and synchronization; memory and file management; client-server computing; scripts; systems-programming.
princeton_COS  326,"Functional Programming. An introduction to the principles of typed functional programming. Programming recursive functions over structured data types and informal reasoning by induction about the correctness of those functions.  Functional algorithms and data structures.  Principles of modular programming, type abstraction, representation invariants and representation independence.  Parallel functional programming, algorithms and applications."
mit_6.621,"Fundamentals of Photonics. Covers the fundamentals of optics and the interaction of light and matter, leading to devices such as light emitting diodes, optical amplifiers, and lasers. Topics include classical ray, wave, beam, and Fourier optics; Maxwell's electromagnetic waves; resonators; quantum theory of photons; light-matter interaction; laser amplification; lasers; and semiconductors optoelectronics. Students taking graduate version complete additional assignments."
mit_6.835,"Intelligent Multimodal User Interfaces. Implementation and evaluation of intelligent multi-modal user interfaces, taught from a combination of hands-on exercises and papers from the original literature. Topics include basic technologies for handling speech, vision, pen-based interaction, and other modalities, as well as various techniques for combining modalities. Substantial readings and a term project, where students build an interface to illustrate one or more themes of the course. 8 Engineering Design Points."
mit_6.101,"Introductory Analog Electronics Laboratory. Introductory experimental laboratory explores the design, construction, and debugging of analog electronic circuits. Lectures and laboratory projects in the first half of the course investigate the performance characteristics of semiconductor devices (diodes, BJTs, and MOSFETs) and functional analog building blocks, including single-stage amplifiers, op amps, small audio amplifier, filters, converters, sensor circuits, and medical electronics (ECG, pulse-oximetry). Projects involve design, implementation, and presentation in an environment similar to that of industry engineering design teams. Instruction and practice in written and oral communication provided. Opportunity to simulate real-world problems and solutions that involve tradeoffs and the use of engineering judgment. Engineers from local companies help students with their design projects. 12 Engineering Design Points."
caltech_BE/CS 196,"Design and Construction of Programmable Molecular Systems. This course will introduce students to the conceptual frameworks and tools of computer science as applied to molecular engineering, as well as to the practical realities of synthesizing and testing their designs in the laboratory. In part a, students will design and construct DNA logic circuits, biomolecular neural networks, and complex two-dimensional and three-dimensional nanostructures, as well as quantitatively analyze the designs and the experimental data. Students will learn laboratory techniques including gel electrophoresis, fluorescence spectroscopy, and atomic force microscopy, and will use software tools and program in Mathematica or Mat lab. Part b is an open-ended, design-and-build project requiring instructor’s permission for enrollment. Enrollment in both parts a and b is limited to 12 students."
stanford_CS 142,"Web Applications. Concepts and techniques used in constructing interactive web applications. Browser-side web facilities such as HTML, cascading stylesheets, javascript, and the document object model. Server-side technologies such as sessions, templates, relational databases, and object-relational mapping. Issues in web security and application scalability. New models of web application deployment."
mit_6.231,"Dynamic Programming and Stochastic Control. Sequential decision-making via dynamic programming. Unified approach to optimal control of stochastic dynamic systems and Markovian decision problems. Applications in linear-quadratic control, inventory control, resource allocation, scheduling, and planning. Optimal decision making under perfect and imperfect state information. Certainty equivalent, open loop-feedback control, rollout, model predictive control, aggregation, and other suboptimal control methods. Infinite horizon problems: discounted, stochastic shortest path, average cost, and semi-Markov models. Value and policy iteration. Abstract models in dynamic programming. Approximate/neurodynamic programming. Simulation based methods. Discussion of current research on the solution of large-scale problems."
msu_CSE 841,"Artificial Intelligence. Types of intelligence, knowledge representation, cognitive models. Goal-based systems, heuristic search and games, expert systems. Language understanding, robotics and computer vision, theorem proving and deductive systems, and learning."
mit_6.921,6-A Internship. Provides academic credit for the first assignment of 6-A undergraduate students at companies affiliated with the department's 6-A internship program.
mit_6.336,"Introduction to Numerical Simulation. Introduction to computational techniques for the simulation of a large variety of engineering and engineered systems. Applications drawn from aerospace, mechanical, electrical, and chemical engineering, biology, and materials science. Topics: mathematical formulations; network problems; sparse direct and iterative matrix solution techniques; Newton methods for nonlinear problems; discretization methods for ordinary, time-periodic and partial differential equations; fast methods for partial differential equations and integral equations, techniques for model order reduction of dynamical systems and approaches for molecular dynamics."
cmu_15-346,"Special Topic: Perspectives in Computer Architecture. This course is ONLY offered at Carnegie Mellon in Qatar.  This course will provide various perspectives in the field of computer architecture by world renowned scientists. The course will bring together basic architecture principles and designs of uniprocessor and multicore computers. First, we introduce the Von-Neuman architecture and the major hardware components of a modern computer. Students will learn how to describe an architecture design using a Hardware Description Language such as Verilog. Second, we will learn basic architectural techniques including instruction level parallelism, pipelining and cache memory. An overview of multicore architectures, specifically on how they differ from uniprocessor ones, the promises they offer, and the serious challenges they bring, will be provided. We will also discuss cache organization techniques in multicores. Students will gain insight into the designing principles that dominated past processor architectures and how they will continue to change for future processor design targeting emerging technologies such as mobile and wearable computing. The concepts delivered in the lectures will be reinforced and extended through student presentations on multiple directions in computer architecture."
mit_6.245,Multivariable Control Systems. Computer-aided design methodologies for synthesis of multivariable feedback control systems. Performance and robustness trade-offs. Model-based compensators; Q-parameterization; ill-posed optimization problems; dynamic augmentation; linear-quadratic optimization of controllers; H-infinity controller design; Mu-synthesis; model and compensator simplification; nonlinear effects. Computer-aided (MATLAB) design homework using models of physical processes. 6 Engineering Design Points.
princeton_COS  318,"Operating Systems. An introduction to operating systems. Emphasis is on the fundamentals of how to design and implement an operating system. Topics include operating system structure, processes, threads, synchronizations, concurrent programming, interprocess communications, virtual memory, I/O device management, and file systems."
iowa_CS:3640,Introduction to Networks and Their Applications. Introduction to networks and the development of network applications; basic concepts of network communication common to applications such as simulation and web services. 
mit_6.642,"Continuum Electromechanics. Laws, approximations, and relations of continuum mechanics. Mechanical and electromechanical transfer relations. Statics and dynamics of electromechanical systems having a static equilibrium. Electromechanical flows. Field coupling with thermal and molecular diffusion. Electrokinetics. Streaming interactions. Application to materials processing, magnetohydrodynamic and electrohydrodynamic pumps and generators, ferrohydrodynamics, physiochemical systems, heat transfer, continuum feedback control, electron beam devices, and plasma dynamics."
psu_CMPSC 465,"Data Structures and Algorithms. Fundamental concepts of computer science: data structures, analysis of algorithms, recursion, trees, sets, graphs, sorting."
mit_6.02,"Introduction to EECS II. Explores communication signals, systems and networks. Substantial laboratory experiments illustrate the role of abstraction and modularity in engineering design. Students gain practical experience in building reliable systems using imperfect components; selecting appropriate design metrics; choosing effective representations for information; and evaluating tradeoffs in complex systems. Topics include physical characterization and modeling of transmission systems in the time and frequency domains; analog and digital signaling; coding; detecting and correcting errors; relating information transmission rate to signal power, bandwidth and noise; and engineering of packet-switched networks. 6 Engineering Design Points."
illinois_CS 373,Theory of Computation. Finite automata and regular languages; pushdown automata and context-free languages; Turing machines and recursively enumerable sets; computability and the halting problem; undecidable problems. 
mit_6.631,"Optics and Photonics. Introduction to fundamental concepts and techniques of optics, photonics, and fiber optics. Review of Maxwell's equations, light propagation, and reflection from dielectrics mirrors and filters. Interferometers, filters, and optical imaging systems. Fresnel and Fraunhoffer diffraction theory. Propagation of Gaussian beams and laser resonator design. Optical waveguides and optical fibers. Optical waveguide and photonic devices."
psu_CMPSC 472,"Operating System Concepts. Theoretical and practical issues of operating systems design and implementation, process management, concurrent programming, memory management, scheduling, I/O, and security."
stanford_CS 240H,"Functional Systems in Haskell. Covers an array of practical issues and techniques that arise when building real-world systems in the Haskell programming language. Topics include the basics of Haskell, laziness, monads, parsers, testing and debugging, performance tuning, interfacing to native code, concurrency and I/O paradigms, language extensions, meta-programming, and applications to the web and security. Concepts will be reinforced through a few individual programming assignments followed by a larger team project. Prior familiarity with Haskell may be helpful but is not required."
caltech_CS 122,"Database System Implementation. This course explores the theory, algorithms, and approaches behind modern relational database systems. Topics include file storage formats, query planning and optimization, query evaluation, indexes, transaction processing, concurrency control, and recovery. Assignments consist of a series of programming projects extending a working relational database, giving hands-on experience with the topics covered in class. The course also has a strong focus on proper software engineering practices, including version control, testing, and documentation."
illinois_CS 440,"Artificial Intelligence. Major topics in and directions of research in artificial intelligence: AI languages (LISP and PROLOG), basic problem solving techniques, knowledge representation and computer inference, machine learning, natural language understanding, computer vision, robotics, and societal impacts. Same as ECE 448. 3 undergraduate hours. 3 or 4 graduate hours. "
mit_6.850,"Geometric Computing. Introduction to the design and analysis of algorithms for geometric problems, in low- and high-dimensional spaces. Algorithms: convex hulls, polygon triangulation, Delaunay triangulation, motion planning, pattern matching. Geometric data structures: point location, Voronoi diagrams, Binary Space Partitions. Geometric problems in higher dimensions: linear programming, closest pair problems. High-dimensional nearest neighbor search and low-distortion embeddings between metric spaces. Geometric algorithms for massive data sets: external memory and streaming algorithms. Geometric optimization."
mit_6.864,"Advanced Natural Language Processing. Introduces the study of human language from a computational perspective, including syntactic, semantic and discourse processing models. Emphasizes machine learning methods and algorithms. Uses these methods and models in applications such as syntactic parsing, information extraction, statistical machine translation, dialogue systems, and summarization. Students taking graduate version complete additional assignments."
maryland_CMSC 435,"Software Engineering. State-of-the-art techniques in software design and development. Laboratory experience in applying the techniques covered. Structured design, structured programming, top-down design and development, segmentation and modularization techniques, iterative enhancement, design and code inspection techniques, correctness, and chief-programmer teams. The development of a large software project."
mit_6.836,"Multicore Programming. Introduces principles and core techniques for programming multicore machines. Topics include locking, scalability, concurrent data structures, multiprocessor scheduling, load balancing, and state-of-the-art synchronization techniques, such as transactional memory. Includes sequence of programming assignments on a large multicore machine, culminating with the design of a highly concurrent application. Students taking graduate version complete additional assignments."
mit_6.952,Graduate 6-A Internship. Provides academic credit for graduate students who require an additional term at the company to complete the graduate assignment of the department's 6-A internship program. This academic credit is for registration purposes only and cannot be used toward fulfilling the requirements of any degree program.
princeton_COS  597B,"Advanced Topics in Computer Science - Automated Reasoning about Software. An introduction to algorithmic techniques for reasoning about software. Students learn the basics of modern Boolean Satisfiability (SAT) solvers and Satisfiability Modulo Theory (SMT) solvers, and their applications in techniques for verification, analysis, and synthesis of software. The course covers techniques like model checking, invariant generation, symbolic execution, and syntax-guided synthesis."
mit_6.061,"Introduction to Electric Power Systems. Electric circuit theory with application to power handling electric circuits. Modeling and behavior of electromechanical devices, including magnetic circuits, motors, and generators. Operational fundamentals of synchronous, induction and DC machinery. Interconnection of generators and motors with electric power transmission and distribution circuits. Power generation, including alternative and sustainable sources. Students taking graduate version complete additional assignments. 6 Engineering Design Points."
stanford_CS 231M,"Mobile Computer Vision. The course surveys recent developments in computer vision, graphics and image processing for mobile application. Topics of interest include: feature extraction, image enhancement and digital photography, 3D scene understanding and modeling, virtual augmentation, object recognition and categorization, human activity recognition. As part of this course, students will familiarize with a state-of-the-art mobile hardware and software development platform: an NVIDIA Tegra-based Android tablet, with relevant libraries such as OpenCV and FCam. Tablets will be available for each student team."
iowa_CS:3210,Programming Languages and Tools. Varied programming languages and tools. 
illinois_CS 554,"Parallel Numerical Algorithms. Numerical algorithms for parallel computers: parallel algorithms in numerical linear algebra (dense and sparse solvers for linear systems and the algebraic eigenvalue problem), numerical handling of ordinary and partial differential equations, and numerical optimization techniques. Same as CSE 512. "
mit_6.720,"Integrated Microelectronic Devices. Covers physics of microelectronic semiconductor devices for integrated circuit applications. Topics include semiconductor fundamentals, p-n junction, metal-oxide semiconductor structure, metal-semiconductor junction, MOS field-effect transistor, and bipolar junction transistor. Studies modern nanoscale devices, including electrostatic scaling, materials beyond Si, carrier transport from the diffusive to the ballistic regime. Emphasizes physical understanding of device operation through energy band diagrams and short-channel MOSFET device design. Includes device modeling exercises. Familiarity with MATLAB required. 2 Engineering Design Points."
stanford_CS 348B,"Computer Graphics: Image Synthesis Techniques. Intermediate level, emphasizing high-quality image synthesis algorithms and systems issues in rendering. Topics include: Reyes and advanced rasterization, including motion blur and depth of field; ray tracing and physically based rendering; Monte Carlo algorithms for rendering, including direct illumination and global illumination; path tracing and photon mapping; surface reflection and light source models; volume rendering and subsurface scattering; SIMD and multi-core parallelism for rendering. Written assignments and programming projects."
mit_6.0001,"Introduction to Computer Science Programming in Python. Introduction to computer science and programming for students with little or no programming experience. Students develop skills to program and use computational techniques to solve problems. Topics include the notion of computation, Python, simple algorithms and data structures, testing and debugging, and algorithmic complexity. Combination of 6.0001 and 6.0002 counts as REST subject."
"princeton_ELE  475,COS  475","Computer Architecture. Modern computer processor architecture. I/O Architecture. Instruction-set architecture and high-performance processor organization including pipelining and data and instruction parallelism. Cache, memory, and storage architectures. Multiprocessors and multicore processors. Coherent caches. Interconnection and network infrastructures."
purdue_CS 52600,"Information Security. (CSCI 52600) Basic notions of confidentiality, integrity, availability; authentication models; protection models; security kernels; secure programming; audit; intrusion detection and response; operational security issues; physical security issues; personnel security; policy formation and enforcement; access controls; information flow; legal and social issues; identification and authentication in local and distributed systems; classification and trust modeling; and risk assessment."
purdue_CS 54200,"Distributed Database Systems. Fundamental issues in distributed database systems that are motivated by the computer networking and distribution of processors and databases. The theory, design, specification, implementation, and performance of distributed database systems."
mit_6.838,"Advanced Topics in Computer Graphics. In-depth study of an active research topic in computer graphics. Topics change each term. Readings from the literature, student presentations, short assignments, and a programming project."
illinois_CS 475,Formal Models of Computation. Finite automata and regular languages; pushdown automata and context-free languages; Turing machines and recursively enumerable sets; linear-bounded automata and context-sensitive languages; computability and the halting problem; undecidable problems; recursive functions; Chomsky hierarchy; computational complexity. Same as MATH 475. 3 undergraduate hours. 3 or 4 graduate hours. 
"princeton_COS  375,ELE  375","Computer Architecture and Organization. An introduction to computer architecture and organization. Instruction set design; basic processor implementation techniques; performance measurement; caches and virtual memory; pipelined processor design; design trade-offs among cost, performance, and complexity."
mit_6.701,"Introduction to Nanoelectronics. Transistors at the nanoscale. Quantization, wavefunctions, and Schrodinger's equation. Introduction to electronic properties of molecules, carbon nanotubes, and crystals. Energy band formation and the origin of metals, insulators and semiconductors. Ballistic transport, Ohm's law, ballistic versus traditional MOSFETs, fundamental limits to computation."
mit_6.170,"Software Studio. Covers design and implementation of software systems, using web applications as the platform. Emphasizes the role of conceptual design in achieving clarity, simplicity, and modularity. Students complete open-ended individual assignments and a major team project. 12 Engineering Design Points."
cmu_15-317,"Constructive Logic. This multidisciplinary junior-level course is designed to provide a thorough introduction to modern constructive logic, its roots in philosophy, its numerous applications in computer science, and its mathematical properties. Some of the topics to be covered are intuitionistic logic, inductive definitions, functional programming, type theory, realizability, connections between classical and constructive logic, decidable classes."
mit_6.730,"Physics for Solid-State Applications. Classical and quantum models of electrons and lattice vibrations in solids, emphasizing physical models for elastic properties, electronic transport, and heat capacity. Crystal lattices, electronic energy band structures, phonon dispersion relatons, effective mass theorem, semiclassical equations of motion, electron scattering and semiconductor optical properties. Band structure and transport properties of selected semiconductors. Connection of quantum theory of solids with quasi-Fermi levels and Boltzmann transport used in device modeling."
illinois_CS 519,"Scientific Visualization. Visualization techniques useful in analysis of engineering and scientific data. Physical models; methods of computational science; two- and three-dimensional data types; visual representation schemes for scalar, vector, and tensor data; isosurface and volume visualization methods; visual monitoring; interactive steering. Same as CSE 527. "
stanford_CS 242,"Programming Languages. Central concepts in modern programming languages, impact on software development, language design trade-offs, and implementation considerations. Functional, imperative, and object-oriented paradigms. Formal semantic methods and program analysis. Modern type systems, higher order functions and closures, exceptions and continuations. Modularity, object-oriented languages, and concurrency. Runtime support for language features, interoperability, and security issues."
mit_6.832,"Underactuated Robotics. Covers nonlinear dynamics and control of underactuated mechanical systems, with an emphasis on computational methods. Topics include nonlinear dynamics of passive robots (walkers, swimmers, flyers), motion planning, robust and optimal control, reinforcement learning/approximate optimal control, and the influence of mechanical design on control. Includes examples from biology and applications to legged locomotion, compliant manipulation, underwater robots, and flying machines."
psu_CSE 550,"Numerical Linear Algebra. Solution of linear systems, sparse matrix techniques, linear least squares, singular value decomposition, numerical computation of eigenvalues and eigenvectors."
cmu_15-421,"Information Security and Privacy. The objective of this course is to introduce students to the technologies of Web Commerce, Security and Privacy as well as to related business, policy and usability issues. Content: Over the past 15 years, the Web has become an integral part of our daily life, whether at home or at work. This course provides students with an overview of the technologies and practices associated with Web Security, Privacy and Commerce. In the process, students will learn what it takes to design and develop successful web applications and services, reconciling security, privacy, usability and business considerations. The course is organized around two parts: Part I - Web Security & Privacy Technologies The big picture, gentle introduction to cryptography, digital signatures, key management, authentication, Internet security protocols, certificates & PKI, decentralized trust management, privacy enhancing technologies, electronic payments. Part II - Web Commerce The big picture, Internet marketing & personalization, search engines, B2B and electronic markets, P2P, Web 2.0, Mobile Commerce, social networking. Format: Lectures (including guest lectures), discussions, student presentations, and class projects."
maryland_CMSC 725,"Geographical Information Systems and Spatial Databases. Topics in geographic information systems and spatial databases. Integrates related results from databases, cartography, geography, computer graphics, file access methods, computational geometry, image processing, data structures, and programming languages. Topics include: cartographic modeling, principles of cartography, methods from computational geometry, principles of spatial databases, access methods, and spatial data structures. The architecture of some existing spatial databases and geographic information systems will be examined in greater detail."
cmu_15-313,"Foundations of Software Engineering. Students gain exposure to the fundamentals of modern software  engineering.  This includes both core CS technical knowledge and  the means by which this knowledge can be applied in the practical  engineering of complex software.  Topics related to software  artifacts include design models, patterns, coding, static and  dynamic analysis, testing and inspection, measurement, and  software architecture and frameworks.  Topics related to software  process include modeling, requirements engineering, process models  and evaluation, team development, and supply chain issues  including outsourcing and open source.  This course has a strong  technical focus, and will include both written and programming  assignments.  Students will get experience with modern software  engineering tools."
purdue_CS 61400,"Numerical Solution Of Ordinary Differential Equations. Numerical solution of initial-value problems by Runge-Kutta methods, general one-step methods, and multistep methods; analysis of truncation error, discretization error, and rounding error; stability of multistep methods; numerical solution of boundary- and eigen-value problems by initial-value techniques and finite difference methods."
caltech_EE/CS 53,"Microprocessor Project Laboratory. A project laboratory to permit the student to select, design, and build a microprocessor-based system. The student is expected to take a project from proposal through design and implementation (possibly including PCB fabrication) to final review and documentation. May be repeated for credit."
psu_CMPSC 484,Computer Science Senior Project I. Computer science capstone project with documentation emphasis.
illinois_CS 523,"Advanced Operating Systems. Advanced concepts in operating system design and coverage of recent research directions. Resource management for parallel and distributed systems. Interaction between operating system design and computer architectures. Process management, virtual memory, interprocess communication, context switching, parallel and distributed file system designs, persistent objects, process and data migration, load balancing, security, protection. Term projects. "
mit_6.839,"Advanced Computer Graphics. A graduate level course investigates computational problems in rendering, animation, and geometric modeling. The course draws on advanced techniques from computational geometry, applied mathematics, statistics, scientific computing and other. Substantial programming experience required."
mit_6.438,"Algorithms for Inference. Introduction to statistical inference with probabilistic graphical models. Directed and undirected graphical models, and factor graphs, over discrete and Gaussian distributions; hidden Markov models, linear dynamical systems. Sum-product and junction tree algorithms; forward-backward algorithm, Kalman filtering and smoothing. Min-sum and Viterbi algorithms. Variational methods, mean-field theory, and loopy belief propagation. Particle methods and filtering. Building graphical models from data, including parameter estimation and structure learning; Baum-Welch and Chow-Liu algorithms. Selected special topics."
psu_CMPSC 497B,Cyber Security Context Problem Practice. The course covers the basics and skills solving challenges of different types in the hacking competition series.
"princeton_COS  126,EGR  126","General Computer Science. An introduction to computer science in the context of scientific, engineering, and commercial applications. The course will teach basic principles and practical issues, and will prepare students to use computers effectively for applications in computer science, physics, biology, chemistry, engineering, and other disciplines. Topics include: hardware and software systems; programming in Java; algorithms and data structures; fundamental principles of computation; and scientific computing, including simulation, optimization, and data analysis. No prior programming experience required. Video lectures, one or two classes, two precepts"
psu_CSE 597A,"Sublinear Algorithms. This course will cover the design and analysis of algorithms that are restricted to run in sublinear time. Such algorithms are typically randomized and produce only approximate answers. A characteristic feature of sublinear algorithms is that they do not have time to access the entire input. Therefore, input representation and the model for accessing the input play an important role. We will study different models appropriate for sublinear algorithms. The course will cover sublinear algorithms discovered in a variety of areas, including graph theory, algebra, geometry, image analysis and discrete mathematics, and introduce many techniques that are applied to analyzing sublinear algorithms."
cmu_15-351,"Algorithms and Advanced Data Structures. The objective of this course is to study algorithms for general computational problems, with a focus on the principles used to design those algorithms. Efficient data structures will be discussed to support these algorithmic concepts. Topics include: Run time analysis, divide-and-conquer algorithms, dynamic programming algorithms, network flow algorithms, linear and integer programming, large-scale search algorithms and heuristics, efficient data storage and query, and NP-completeness. Although this course may have a few programming assignments, it is primarily not a programming course. Instead, it will focus on the design and analysis of algorithms for general classes of problems. This course is not open to CS graduate students who should consider taking 15-651 instead. THIS COURSE IS NOT OPEN TO COMPUTER SCIENCE MAJORS OR MINORS."
mit_6.142,"Robotics: Science and Systems II. Implementation and operation of the embedded system designed in 6.141[J]. Addresses open research issues such as sustained autonomy, situational awareness, and human interaction. Students carry out experiments to assess their design and deliver a final written report. Prior knowledge of one or more of the following areas would be useful: control (2.004, 6.302, or 16.30), software (1.00, 6.005, or 6.0001, 6.0002, 16.35), electronics (6.002, 6.070[J], 6.111, or 6.115), mechanical engineering (2.007), or independent experience (6.146 competitions or a UROP). 12 Engineering Design Points."
stanford_CS 161,"Design and Analysis of Algorithms. Worst and average case analysis. Recurrences and asymptotics. Efficient algorithms for sorting, searching, and selection. Data structures: binary search trees, heaps, hash tables. Algorithm design techniques: divide-and-conquer, dynamic programming, greedy algorithms, amortized analysis, randomization. Algorithms for fundamental graph problems: minimum-cost spanning tree, connected components, topological sort, and shortest paths. Possible additional topics: network flow, string searching."
stanford_CS 231A,"Computer Vision: From 3D Reconstruction to Recognition. (Formerly 223B) An introduction to the concepts and applications in computer vision. Topics include: cameras and projection models, low-level image processing methods such as filtering and edge detection; mid-level vision topics such as segmentation and clustering; shape reconstruction from stereo, as well as high-level vision tasks such as object recognition, scene recognition, face detection and human motion categorization."
stanford_CS 239,"Advanced Topics in Sequential Decision Making. Survey of recent research advances in intelligent decision making for dynamic environments from a computational perspective. Efficient algorithms for single and multiagent planning in situations where a model of the environment may or may not be known. Partially observable Markov decision processes, approximate dynamic programming, and reinforcement learning. New approaches for overcoming challenges in generalization from experience, exploration of the environment, and model representation so that these methods can scale to real problems in a variety of domains including aerospace, air traffic control, and robotics. Students are expected to produce an original research paper on a relevant topic."
illinois_CS 431,Embedded Systems. A survey of sampled data systems and embedded architecture; key concepts in common embedded system applications; signal processing and control; embedded microprocessor and device interface; time-critical I/O handling; data communications; real-time operating systems and techniques for the development and analysis of embedded real-time software; hands-on laboratory projects. 3 undergraduate hours. 3 or 4 graduate hours. 
maryland_CMSC 631,"Program Analysis and Understanding. Techniques for static analysis of source code and modern programming paradigms. Analysis techniques: data flow analysis, program dependence graphs, program slicing, abstract interpretation. The meaning of programs: denotational semantics, partial evaluation. Advanced treatment of abstraction mechanisms: polymorphic types, operation overloading, inheritance, object-oriented programming and ML-like programming languages."
mit_6.932,"Linked Data Ventures. Provides practical experience in the use and development of semantic web technologies. Focuses on gaining practical insight from executives and practitioners who use these technologies in their companies. Working in multidisciplinary teams, students complete a term project to develop a sustainable prototype. Concludes with a professional presentation, judged by a panel of experts, and a technical presentation to faculty."
stanford_CS 108,"Object-Oriented Systems Design. Software design and construction in the context of large OOP libraries. Taught in Java. Topics: OOP design, design patterns, testing, graphical user interface (GUI) OOP libraries, software engineering strategies, approaches to programming in teams."
caltech_Ma/CS 6,"Introduction to Discrete Mathematics. First term: a survey emphasizing graph theory, algorithms, and applications of algebraic structures. Graphs: paths, trees, circuits, breadth-first and depth-first searches, colorings, matchings. Enumeration techniques; formal power series; combinatorial interpretations. Topics from coding and cryptography, including Hamming codes and RSA. Second term: directed graphs; networks; combinatorial optimization; linear programming. Permutation groups; counting nonisomorphic structures. Topics from extremal graph and set theory, and partially ordered sets. Third term: elements of computability theory and computational complexity. Discussion of the P=NP problem, syntax and semantics of propositional and first-order logic. Introduction to the Gödel completeness and incompleteness theorems."
maryland_CMSC 216,"Introduction to Computer Systems. Machine representation of data including integers and floating point. Modern computer architectural features and their interaction with software (registers, caches). Interaction between user programs and the OS: system class, process, and thread management. Optimizing software to improve runtime performance using both compilers and hand turning."
mit_6.690,"Introduction to Electric Power Systems. Electric circuit theory with application to power handling electric circuits. Modeling and behavior of electromechanical devices, including magnetic circuits, motors, and generators. Operational fundamentals of synchronous, induction and DC machinery. Interconnection of generators and motors with electric power transmission and distribution circuits. Power generation, including alternative and sustainable sources. Students taking graduate version complete additional assignments."
iowa_CS:4400,"Database Systems. Introduction to database systems including querying using SQL, design using ER diagrams, developing relational databases, programming web applications using PHP or JDBC. "
stanford_CS 374,"Algorithms in Biology. Algorithms and computational models applied to molecular biology and genetics. Topics vary annually. Possible topics include biological sequence comparison, annotation of genes and other functional elements, molecular evolution, genome rearrangements, microarrays and gene regulation, protein folding and classification, molecular docking, RNA secondary structure, DNA computing, and self-assembly. May be repeated for credit."
msu_CSE 232,"Introduction to Programming II. Continuation of object-centered design and implementation in C++. Building programs from modules. Data abstraction and classes to implement abstract data types. Static and dynamic memory allocation. Data structure implementation and algorithm efficiency. Lists, tables, stacks, and queues. Templates and generic programming."
stanford_CS 248,"Interactive Computer Graphics. This is the second course in the computer graphics sequence, and as such it assumes a strong familiarity with rendering and image creation. The course has a strong focus on computational geometry, animation, and simulation. Topics include splines, implicit surfaces, geometric modeling, collision detection, animation curves, particle systems and crowds, character animation, articulation, skinning, motion capture and editing, rigid and deformable bodies, and fluid simulation. As a final project, students implement an interactive video game utilizing various concepts covered in the class. Games may be designed on mobile devices, in a client/server/browser environment, or on a standard personal computer."
psu_CMPSC 443,Introduction to Computer and Network Security. Introduction to theory and practice of computer security with an emphasis on Internet and operating system applications.
cmu_15-492,"Special Topic: Speech Processing. Speech Processing offers a practical and theoretical understanding of how human speech can be processed by computers. It covers speech recognition, speech synthesis and spoken dialog systems. The course involves practicals where the student will build working speech recognition systems, build their own synthetic voice and build a complete telephone spoken dialog system. This work will be based on existing toolkits. Details of algorithms, techniques and limitations of state of the art speech systems will also be presented. This course is designed for students wishing understand how to process real data for real applications, applying statistical and machine learning techniques as well as working with limitations in the technology."
mit_6.845,"Quantum Complexity Theory. Introduction to quantum computational complexity theory, the study of the fundamental capabilities and limitations of quantum computers. Topics include complexity classes, lower bounds, communication complexity, proofs and advice, and interactive proof systems in the quantum world; classical simulation of quantum circuits. The objective is to bring students to the research frontier."
caltech_CS 21,"Decidability and Tractability. This course introduces the formal foundations of computer science, the fundamental limits of computation, and the limits of efficient computation. Topics will include automata and Turing machines, decidability and undecidability, reductions between computational problems, and the theory of NP-completeness."
mit_6.267,"Heterogeneous Networks: Architecture, Transport, Proctocols, and Management. Introduction to modern heterogeneous networks and the provision of heterogeneous services. Architectural principles, analysis, algorithmic techniques, performance analysis, and existing designs are developed and applied to understand current problems in network design and architecture. Begins with basic principles of networking. Emphasizes development of mathematical and algorithmic tools; applies them to understanding network layer design from the performance and scalability viewpoint. Concludes with network management and control, including the architecture and performance analysis of interconnected heterogeneous networks. Provides background and insight to understand current network literature and to perform research on networks with the aid of network design projects. 4 Engineering Design Points."
cmu_15-415,"Database Applications. This course covers the fundamental topics for Database Management  Systems: Database System Architectural Principles (ACID properties; data abstraction; external, conceptual, and internal schemata; data  independence; data definition and data manipulation languages), Data  models (entity-relationship and relational data models; data  structures, integrity constraints, and operations for each data  model; relational query languages: SQL, algebra, calculus), Theory of  database design (functional dependencies; normal forms; dependency  preservation; information loss), Query Optimization (equivalence of  expressions, algebraic manipulation; optimization of selections and  joins), Storage Strategies (indices, B-trees, hashing), Query Processing (execution of sort, join, and aggregation operators), and Transaction Processing (recovery and concurrency control)."
psu_CMPSC 462,"Data Structures. In-depth theoretical study of data structures such as balanced trees, hash tables, priority queues, B-trees, binomial heaps, and Fibonacci heaps."
mit_6.THM,Master of Engineering Program Thesis. Program of research leading to the writing of an MEng thesis; to be arranged by the student and an appropriate MIT faculty member. Restricted to MEng students who have been admitted to the MEng program.
cmu_15-213,"Introduction to Computer Systems. 15-213/18-213 This course provides a programmer's view of how computer systems execute programs, store information, and communicate. It enables students to become more effective programmers, especially in dealing with issues of performance, portability and robustness. It also serves as a foundation for courses on compilers, networks, operating systems, and computer architecture, where a deeper understanding of systems-level issues is required. Topics covered include: machine-level code and its generation by optimizing compilers, performance evaluation and optimization, computer arithmetic, memory organization and management, networking technology and protocols, and supporting concurrent computation. NOTE FOR GRADUATE STUDENTS: This course is not open to graduate students beginning Spring 2015. Graduate students must register for 15-513 instead."
mit_6.007,"Electromagnetic Energy: From Motors to Solar Cells. Discusses applications of electromagnetic and equivalent quantum mechanical principles to classical and modern devices. Covers energy conversion and power flow in both macroscopic and quantum-scale electrical and electromechanical systems, including electric motors and generators, electric circuit elements, quantum tunneling structures and instruments. Studies photons as waves and particles and their interaction with matter in optoelectronic devices, including solar cells and displays."
caltech_CS 123,"Projects in Database Systems. Students are expected to execute a substantial project in databases, write up a report describing their work, and make a presentation."
iowa_CS:4700,High Performance and Parallel Computing. Parallel scientific computing methods such as parallel algorithms for dense and sparse matrices; implementation using libraries such as MPI; current topics such as grid computing. 
psu_CSE 562,"Probabilistic Algorithms. Design and analysis of probabilistic algorithms, reliability problems, probabilistic complexity classes, lower bounds."
mit_6.876,"Advanced Topics in Cryptography. Recent results in cryptography, interactive proofs, and cryptographic game theory. Lectures by instructor, invited speakers, and students."
psu_CMPSC 464,"Introduction to the Theory of Computation. Computability/Complexity: finite automata, regular & context-free languages, Turing machines, Church-Turing Thesis, undecidability, reducibility, completeness, time/space complexity, P versus NP."
caltech_CS/EE/Ma 129,Information and Complexity. A basic course in information theory and computational complexity with emphasis on fundamental concepts and tools that equip the student for research and provide a foundation for pattern recognition and learning theory.
maryland_CMSC 466,"Introduction to Numerical Analysis I. Floating point computations, direct methods for linear systems, interpolation, solution of nonlinear equations."
illinois_CS 410,"Text Information Systems. Theory, design, and implementation of text-based information systems. Text analysis, retrieval models (e.g., Boolean, vector space, probabilistic), text categorization, text filtering, clustering, retrieval system design and implementation, and applications to web information management. 3 undergraduate hours. 3 or 4 graduate hours. "
purdue_CS 66100,"Formal Compiling Methods. Application of concepts developed in formal language and automata theory to the design of programming languages and their processors. Models of syntactic analysis, including canonical precedence, LR(k) and LL(k) parsing methods and variants; efficiency of each. Synthesis techniques, including symbol tables, storage administration, parameter mechanisms, garbage collection; optimization considerations. Models of synthesis, including level, affix, attributed grammars; prospects of fully automating compiler design. Applicative vs. procedural languages and their implementations based on semantic definition of a language (LISP, Lucid) and on proof-like techniques (PROLOG, equational systems); merits of such approaches."
mit_6.816,"Multicore Programming. Introduces principles and core techniques for programming multicore machines. Topics include locking, scalability, concurrent data structures, multiprocessor scheduling, load balancing, and state-of-the-art synchronization techniques, such as transactional memory. Includes sequence of programming assignments on a large multicore machine, culminating with the design of a highly concurrent application. Students taking graduate version complete additional assignments."
maryland_CMSC 250H,"Discrete Structures. Fundamental mathematical concepts related to computer science, includin finite and infinite sets, relations, functions, and propositional logic. Introduction to other techniques, modeling and solving problems in computer science.  Introduction to permutations, combinations, graphs, and trees with selected applications."
caltech_CS/SS 152,"Introduction to Data Privacy. How should we define privacy? What are the tradeoffs between useful computation on large datasets and the privacy of those from whom the data is derived? This course will take a mathematically rigorous approach to addressing these and other questions at the frontier of research in data privacy. We will draw connections with a wide variety of topics, including economics, statistics, information theory, game theory, probability, learning theory, geometry, and approximation algorithms."
psu_CSE 537,Interconnection Networks in Highly Parallel Computers. Study and comparative analysis of various classes of interconnection networks; routing problem; fault tolerance issue; performance evaluation; VLSI implementation.
stanford_CS 231N,"Convolutional Neural Networks for Visual Recognition. Computer Vision has become ubiquitous in our society, with applications innsearch, image understanding, apps, mapping, medicine, drones, andnself-driving cars. Core to many of these applications are the tasks of image classification, localization and detection. This course is a deep dive into details of neural network architectures with a focus on learning end-to-end models for these tasks, particularly image classification. During the 10-week course, students will learn to implement, train and debug their own neural networks and gain a detailed understanding of cutting-edge research in computer vision. The final assignment will involve training a multi-million parameter convolutional neural network and applying it on the largest image classification dataset (ImageNet). We will focus on teaching how to set up the problem of image recognition, the learning algorithms (e.g. backpropagation), practical engineering tricks for training and fine-tuning the networks and guide the students through hands-on assignments and a final course project. Much of the background and materials of this course will be drawn from the ImageNet Challenge: http://image-net.org/challenges/LSVRC/2014/index."
mit_6.775,"CMOS Analog and Mixed-Signal Circuit Design. A detailed exposition of the principles involved in designing and optimizing analog and mixed-signal circuits in CMOS technologies. Small-signal and large-signal models. Systemic methodology for device sizing and biasing. Basic circuit building blocks. Operational amplifier design. Large signal considerations. Principles of switched capacitor networks including switched-capacitor and continuous-time integrated filters. Basic and advanced A/D and D/A converters, delta-sigma modulators, RF and other signal processing circuits. Design projects on op amps and subsystems are a required part of the subject. 4 Engineering Design Points."
msu_CSE 320,Computer Organization and Architecture. Boolean algebra and digital logic.  Combinational and sequential circuits. Representations of data and instructions.  Architecture and major components of computer systems.  Assembly language programming and interfacing to high level languages.  Assembler and linker processing.
maryland_CMSC 666,"Numerical Analysis I. Interpolation and approximation, numerical integration, solution algorithms for nonlinear systems of equations, numerical optimization."
mit_6.819,"Advances in Computer Vision. Advanced topics in computer vision with a focus on the use of machine learning techniques and applications in graphics and human-computer interface. Covers image representations, texture models, structure-from-motion algorithms, Bayesian techniques, object and scene recognition, tracking, shape modeling, and image databases. Applications may include face recognition, multimodal interaction, interactive systems, cinematic special effects, and photorealistic rendering. Covers topics complementary to 6.801. Students taking graduate version complete additional assignments."
cmu_15-150,"Principles of Functional Programming. An introduction to programming based on a ""functional"" model of computation.  The functional model is a natural generalization of algebra in which programs are formulas that describe the output of a computation in terms of its inputs—-that is, as a function.  But instead of being confined to real- or complex-valued functions, the functional model extends the algebraic view to a very rich class of data types, including not only aggregates built up from other types, but also functions themselves as values.  This course is an introduction to programming that is focused on the central concepts of function and type.  One major theme is the interplay between inductive types, which are built up incrementally; recursive functions, which compute over inductive types by decomposition; and proof by structural induction, which is used to prove the correctness and time complexity of a recursive function.  Another major theme is the role of types in structuring large programs into separate modules, and the integration of imperative programming through the introduction of data types whose values may be altered during computation.    NOTE: students must achieve a C or better in order to use   this course to satisfy the pre-requisite for any subsequent Computer   Science course."
cmu_15-453,"Formal Languages, Automata, and Computability. An introduction to the fundamental ideas and models underlying computing: finite automata, regular sets, pushdown automata, context-free grammars, Turing machines, undecidability, and complexity theory."
illinois_CS 414,"Multimedia Systems. Organization and structure of modern multimedia systems; audio and video encoding; quality of service concepts; scheduling algorithms for multimedia within OS and networks multimedia protocols over high-speed networks; synchronization schemes, user-interface design; multimedia teleservices. 3 undergraduate hours. 3 or 4 graduate hours. "
mit_6.503,"Foundations of Algorithms and Computational Techniques in Systems Biology. Illustrates computational approaches to solving problems in systems biology. Uses a series of case studies to demonstrate how an effective match between the statement of a biological problem and the selection of an appropriate algorithm or computational technique can lead to fundamental advances. Covers several discrete and numerical algorithms used in simulation, feature extraction, and optimization for molecular, network, and systems models in biology. Students taking graduate version complete additional assignments."
stanford_CS 140,"Operating Systems and Systems Programming. Operating systems design and implementation. Basic structure; synchronization and communication mechanisms; implementation of processes, process management, scheduling, and protection; memory organization and management, including virtual memory; I/O device management, secondary storage, and file systems."
psu_CMPSC 459,Scientific Visualization. Visualization techniques for data analysis and presentation. Applying visualization and perceptual theory.  Using extending platform independent visualization software.
stanford_CS 1C,"Introduction to Computing at Stanford. For those with limited experience with computers or who want to learn more about Stanford's computing environment. Topics include: computer maintenance and security, computing resources, Internet privacy, and copyright law. One-hour lecture/demonstration in dormitory clusters prepared and administered weekly by the Resident Computer Consultant (RCC). Final project. Not a programming course."
mit_6.341,"Discrete-Time Signal Processing. Representation, analysis, and design of discrete time signals and systems. Decimation, interpolation, and sampling rate conversion. Noise shaping. Flowgraph structures for DT systems. Lattice filters. Time- and frequency-domain design techniques for IIR and FIR filters. Parametric signal modeling, linear prediction, and the relation to lattice filters. Discrete Fourier transform (DFT). Computation of the DFT including FFT algorithms. Short-time Fourier analysis and relation to filter banks. Multirate techniques. Perfect reconstruction filter banks and their relation to wavelets."
mit_6.047,"Computational Biology: Genomes, Networks, Evolution. Covers the algorithmic and machine learning foundations of computational biology, combining theory with practice. Principles of algorithm design, influential problems and techniques, and analysis of large-scale biological datasets. Topics include (a) genomes: sequence analysis, gene finding, RNA folding, genome alignment and assembly, database search; (b) networks: gene expression analysis, regulatory motifs, biological network analysis; (c) evolution: comparative genomics, phylogenetics, genome duplication, genome rearrangements, evolutionary theory. These are coupled with fundamental algorithmic techniques including: dynamic programming, hashing, Gibbs sampling, expectation maximization, hidden Markov models, stochastic context-free grammars, graph clustering, dimensionality reduction, Bayesian networks."
stanford_CS 228,"Probabilistic Graphical Models: Principles and Techniques. Probabilistic graphical modeling languages for representing complex domains, algorithms for reasoning using these representations, and learning these representations from data. Topics include: Bayesian and Markov networks, extensions to temporal modeling such as hidden Markov models and dynamic Bayesian networks, exact and approximate probabilistic inference algorithms, and methods for learning models from data. Also included are sample applications to various domains including speech recognition, biological modeling and discovery, medical diagnosis, message encoding, vision, and robot motion planning."
stanford_CS 275,"Translational Bioinformatics. Analytic, storage, and interpretive methods to optimize the transformation of genetic, genomic, and biological data into diagnostics and therapeutics for medicine. Topics: access and utility of publicly available data sources; types of genome-scale measurements in molecular biology and genomic medicine; analysis of microarray data; analysis of polymorphisms, proteomics, and protein interactions; linking genome-scale data to clinical data and phenotypes; and new questions in biomedicine using bioinformatics. Case studies."
stanford_CS 345D,"Advanced Topics in Database Systems. The first part of the course will describe classical database systems topics, including join processing, concurrency control, recovery, query optimization, and database theory. On each topic, there will be an in-depth discussion of a few representative papers and recent results. The second part of the course will focus on additional topics that are relevant to database systems, including MapReduce-style processing, information extraction, and predictive analytics. The course readings will primarily consist of classical and recent research papers."
illinois_CS 583,"Approximation Algorithms. Approximation algorithms for NP-hard problems. Basic and advanced techniques in approximation algorithm design: combinatorial algorithms; mathematical programming methods including linear and semi-definite programming, local search methods, and others. Algorithms for graphs and networks, constraint satisfaction, packing and scheduling. "
iowa_CS:2520,"Human-Computer Interaction. Basic theories, principles, and guidelines for design and evaluation of human‑computer interactions; design methodologies (e.g., participatory design, low‑ and high‑fidelity prototyping), user interface technologies (e.g., input and output devices, interaction styles), quantitative and qualitative evaluation of user interfaces (e.g., expert reviews, usability testing). "
psu_CMPSC 455,"Introduction to Numerical Analysis I. Floating point computation, numerical rootfinding, interpolation, numerical quadrature, direct methods for linear systems.  Students may take only one course for credit from CMPSC (MATH) 451 and CMPSC (MATH) 455."
illinois_CS 101,"Intro Computing: Engrg & Sci. Fundamental principles, concepts, and methods of computing, with emphasis on applications in the physical sciences and engineering. Basic problem solving and programming techniques; fundamental algorithms and data structures; use of computers in solving engineering and scientific problems. Intended for engineering and science majors. "
maryland_CMSC 411,"Computer Systems Architecture. Input/output processors and techniques. Intra-system communication, buses, caches. Addressing and memory hierarchies. Microprogramming, parallelism, and pipelining."
mit_6.374,"Analysis and Design of Digital Integrated Circuits. Device and circuit level optimization of digital building blocks. MOS device models including Deep Sub-Micron effects. Circuit design styles for logic, arithmetic, and sequential blocks. Estimation and minimization of energy consumption. Interconnect models and parasitics, device sizing and logical effort, timing issues (clock skew and jitter), and active clock distribution techniques. Memory architectures, circuits (sense amplifiers), and devices. Testing of integrated circuits. Extensive custom and standard cell layout and simulation in design projects and software labs. 4 Engineering Design Points."
cmu_15-494,"Special Topic: Cognitive Robotics. Cognitive robotics is a new approach to robot programming based on    high level primitives for perception and action. These primitives draw    inspiration from ideas in cognitive science combined with state of the    art robotics algorithms. Students will experiment with these    primitives and help develop new ones using the Tekkotsu software    framework on the Calliope robot, which includes a 5 degree-of-freedom    arm with gripper, a Kinect camera on a pan/tilt mount, and Ubuntu    Linux on a dual-core on-board netbook. Prior robotics experience is    not necessary, but strong programming skills are required."
psu_CSE 520,"Science of Computer Programming. Weakest preconditions, nondeterminism, terminating constructs, formal derivation of some often used algorithms, correctness of programs, formal specification of large systems."
illinois_CS 421,"Progrmg Languages & Compilers. Structure of programming languages and their implementation. Basic language design principles; abstract data types; functional languages; type systems; object-oriented languages. Basics of lexing, parsing, syntax-directed translation, semantic analysis, and code generation. 3 undergraduate hours. 3 or 4 graduate hours. "
cmu_15-414,"Bug Catching: Automated Program Verification and Testing. Many CS and ECE students will be developing software and hardware that must be ultra reliable at some point in their careers. Logical errors in such designs can be costly, even life threatening. There have already been a number of well publicized errors like the Intel Pentium floating point error and the Arian 5 crash. In this course we will study tools for finding and preventing logical errors. Three types of tools will be studied: automated theorem proving, state exploration techniques like model checking and tools based on static program analysis. Although students will learn the theoretical basis for such tools, the emphasis will be on actually using them on real examples.  This course can be used to satisfy the Logic & Languages requirement for the Computer Science major."
mit_6.011,"Signals, Systems, and Inference. Covers signals, systems and inference in communication, control and signal processing. Topics include input-output and state-space models of linear systems driven by deterministic and random signals; time- and transform-domain representations in discrete and continuous time; and group delay. State feedback and observers. Probabilistic models; stochastic processes, correlation functions, power spectra, spectral factorization. Least-mean square error estimation; Wiener filtering. Hypothesis testing; detection; matched filters."
stanford_CS 210A,"Software Project Experience with Corporate Partners. Two-quarter project course. Focus is on real-world software development. Corporate partners seed projects with loosely defined challenges from their R&D labs; students innovate to build their own compelling software solutions. Student teams are treated as start-up companies with a budget and a technical advisory board comprised of instructional staff and corporate liaisons. Teams will typically travel to the corporate headquarters of their collaborating partner, meaning some teams will travel internationally. Open loft classroom format such as found in Silicon Valley software companies. Exposure to: current practices in software engineering; techniques for stimulating innovation; significant development experience with creative freedoms; working in groups; real-world software engineering challenges; public presentation of technical work; creating written descriptions of technical work."
stanford_CS 448Z,"Physically Based Animation and Sound. Intermediate level, emphasizing physically based simulation techniques for computer animation and synchronized sound synthesis. Topics vary from year to year, but include integrated approaches to visual and auditory simulation of rigid bodies, deformable solids, collision detection and contact resolution, fracture, fluids and gases, and virtual characters. Written assignments and programming projects."
msu_CSE 814,"Formal Methods in Software Development. Formal specification languages, integrating verification with development. Design and the implementation of term project."
caltech_CS/CNS 171,"Introduction to Computer Graphics Laboratory. This course introduces the basic ideas behind computer graphics and its fundamental algorithms. Topics include graphics input and output, the graphics pipeline, sampling and image manipulation, three-dimensional transformations and interactive modeling, basics of physically based modeling and animation, simple shading models and their hardware implementation, and fundamental algorithms of scientific visualization. Students will be required to perform significant implementations."
mit_6.813,"User Interface Design and Implementation. Examines human-computer interaction in the context of graphical user interfaces. Covers human capabilities, design principles, prototyping techniques, evaluation techniques, and the implementation of graphical user interfaces. Includes short programming assignments and a semester-long group project. Students taking the graduate version also have readings from current literature and additional assignments. 6 Engineering Design Points."
cmu_15-383,"Introduction to Text Processing. Text processing is a mini-course about text basic techniques of processing human language in text format.  The course has theoretical and hands-on components. In the theoretical component, the course will discuss challenges in processing human languages, and review the  basics of statistics and probability theory and their application to language problems.  In the hands-on part, students will learn about Python programming and use it to process large volumes of text using various  techniques. The processing will range from simple steps such as tokenization and part-of-speech tagging to full-fledged  applications such as  statistical machine translation,  search and document/topic classification.  The course is suited for junior and senior students in CS and IS."
psu_CMPSC 426,"Object-oriented Design. Object-oriented analysis and design; design patterns such as creational, structural, and behavioral patterns; UML; and unified process."
iowa_CS:5850,"Programming Language Foundations. Introduction to formal foundations of programming languages using a variety of models, including attribute grammars, operational, axiomatic, denotational, and algebraic techniques; proofs of program equivalence, correctness, termination. "
cmu_15-462,"Computer Graphics. This course provides a comprehensive introduction to computer graphics modeling, animation, and rendering. Topics covered include basic image processing, geometric transformations, geometric modeling of curves and surfaces, animation, 3-D viewing, visibility algorithms, shading, and ray tracing."
mit_6.831,"User Interface Design and Implementation. Examines human-computer interaction in the context of graphical user interfaces. Covers human capabilities, design principles, prototyping techniques, evaluation techniques, and the implementation of graphical user interfaces. Includes short programming assignments and a semester-long group project. Students taking the graduate version also have readings from current literature and additional assignments. 6 Engineering Design Points."
mit_6.262,"Discrete Stochastic Processes. Review of probability and laws of large numbers; Poisson counting process and renewal processes; Markov chains (including Markov decision theory), branching processes, birth-death processes, and semi-Markov processes; continuous-time Markov chains and reversibility; random walks, martingales, and large deviations; applications from queueing, communication, control, and operations research."
cmu_15-294,"Special Topic: Rapid Prototyping Technologies. This mini-course introduces students to rapid prototyping technologies with a focus on laser cutting and 3D printing.  The course has three components: 1) A survey of rapid prototyping and additive manufacturing technologies, the maker and open source movements, and societal impacts of these technologies; 2) An introduction to the computer science behind these technologies: CAD tools, file formats, slicing algorithms; 3) Hands-on experience with SolidWorks, laser cutting, and 3D printing, culminating in student projects (e.g. artistic creations, functional objects, replicas of famous calculating machines, etc.). Please note that there will be a usage/materials fee for this course."
mit_6.434,"Statistics for Engineers and Scientists. Rigorous introduction to fundamentals of statistics motivated by engineering applications. Topics include exponential families, order statistics, sufficient statistics, estimation theory, hypothesis testing, measures of performance, notions of optimality, analysis of variance (ANOVA), simple linear regression, and selected topics."
stanford_CS 107,"Computer Organization and Systems. Introduction to the fundamental concepts of computer systems. Explores how computer systems execute programs and manipulate data, working from the C programming language down to the microprocessor. Topics covered include: the C programming language, data representation, machine-level code, computer arithmetic, elements of code compilation, memory organization and management, and performance evaluation and optimization."
caltech_EE/CS 52,"Microprocessor Systems Laboratory. Prerequisites: EE/CS 51 or equivalent. The student will design, build, and program a specified microprocessor-based system. This structured laboratory is organized to familiarize the student with electronic circuit construction techniques, modern development facilities, and standard design techniques. The lectures cover topics in microprocessor system design such as display technologies, interfacing with analog systems, and programming microprocessors in high-level languages."
iowa_CS:2630,"Computer Organization. Computer building blocks: representing data, computer arithmetic, instruction sets, assembly language, digital logic, control units, ALU design, register operations, memory organization, IO. "
stanford_CS 251,"Bitcoin and Crypto Currencies. For advanced undergraduates and for graduate students.  The potential applications for Bitcoin-like technologies is enormous.  The course will cover the technical aspects of crypto-currencies, blockchain technologies, and distributed consensus. Students will learn how these systems work and how to engineer secure software that interacts with the Bitcoin network and other crypto currencies."
caltech_CS 121,"Introduction to Relational Databases. Introduction to the basic theory and usage of relational database systems. It covers the relational data model, relational algebra, and the Structured Query Language (SQL). The course introduces the basics of database schema design and covers the entity-relationship model, functional dependency analysis, and normal forms. Additional topics include other query languages based on the relational calculi, data-warehousing and dimensional analysis, writing and using stored procedures, working with hierarchies and graphs within relational databases, and an overview of transaction processing and query evaluation. Extensive hands-on work with SQL databases."
stanford_CS 371,"Computational Biology in Four Dimensions. Computational approaches to understanding the three-dimensional spatial organization of biological systems and how that organization evolves over time.  The course will cover cutting-edge research in both physics-based simulation and computational analysis of experimental data, at scales ranging from individual molecules to entire cells."
mit_6.874,"Computational Systems Biology. Presents computational approaches and algorithms for contemporary problems in systems biology, with a focus on models of biological systems, including regulatory network discovery and validation. Topics include genotypes, regulatory factor binding and motif discovery, and whole genome RNA expression; regulatory networks (discovery, validation, data integration, protein-protein interactions, signaling, whole genome chromatin immunoprecipitation analysis); and experimental design (model validation, interpretation of interventions). Discusses computational methods, including directed and undirected graphical models, such as Bayesian networks, factor graphs, Dirichlet processes, and topic models. Multidisciplinary team-oriented final research project."
mit_6.263,"Data-Communication Networks. Provides an introduction to data networks with an analytic perspective, using telephone networks, wireless networks, optical networks, the Internet and data centers as primary applications. Presents basic tools for modeling and performance analysis accompanied by elementary, meaningful simulations. Develops insights for large networks by means of simple approximations. Draws upon concepts from queueing theory and optimization."
mit_6.945,"Large-scale Symbolic Systems. Concepts and techniques for the design and implementation of large software systems that can be adapted to uses not anticipated by the designer. Applications include compilers, computer-algebra systems, deductive systems, and some artificial intelligence applications. Covers means for decoupling goals from strategy, mechanisms for implementing additive data-directed invocation, work with partially-specified entities, and how to manage multiple viewpoints. Topics include combinators, generic operations, pattern matching, pattern-directed invocation, rule systems, backtracking, dependencies, indeterminacy, memoization, constraint propagation, and incremental refinement. Students taking graduate version complete additional assignments."
stanford_CS 246,"Mining Massive Data Sets. The course will discuss data mining and machine learning algorithms for analyzing very large amounts of data. The emphasis will be on Map Reduce as a tool for creating parallel algorithms that can process very large amounts of data. Topics include: Frequent itemsets and Association rules, Near Neighbor Search in High Dimensional Data, Locality Sensitive Hashing (LSH), Dimensionality reduction, Recommender Systems, Clustering, Link Analysis, Large-scale machine learning, Data streams,  Analysis of Social-network Graphs, and Web Advertising."
illinois_CS 445,"Computational Photography. Computer vision techniques to enhance, manipulate, and create media from photo collections, such as panoramic stitching, face morphing, texture synthesis, blending, and 3D reconstruction. 3 undergraduate hours. 3 or 4 graduate hours. "
psu_CSE 555,"Numerical Optimization Techniques. Unconstrained and constrained optimization methods, linear and quadratic programming, software issues, ellipsoid and Karmarkar's algorithm, global optimization, parallelism in optimization."
mit_6.777,"Design and Fabrication of Microelectromechanical Systems. Provides an introduction to microsystem design. Covers material properties, microfabrication technologies, structural behavior, sensing methods, electromechanical actuation, thermal actuation and control, multi-domain modeling, noise, and microsystem packaging. Applies microsystem modeling, and manufacturing principles to the design and analysis a variety of microscale sensors and actuators (e.g., optical MEMS, bioMEMS, and inertial sensors). Emphasizes modeling and simulation in the design process. Students taking the graduate version complete additional assignments. 4 Engineering Design Points."
mit_6.435,"System Identification. Mathematical models of systems from observations of their behavior. Time series, state-space, and input-output models. Model structures, parametrization, and identifiability. Nonparametric methods. Prediction error methods for parameter estimation, convergence, consistency, andasymptotic distribution. Relations to maximum likelihood estimation. Recursive estimation; relation to Kalman filters; structure determination; order estimation; Akaike criterion; and bounded but unknown noise models. Robustness and practical issues."
stanford_CS 240,"Advanced Topics in Operating Systems. Recent research. Classic and new papers. Topics: virtual memory management, synchronization and communication, file systems, protection and security, operating system extension techniques, fault tolerance, and the history and experience of systems programming."
stanford_CS 223A,"Introduction to Robotics. Robotics foundations in modeling, design, planning, and control. Class covers relevant results from geometry, kinematics, statics, dynamics, motion planning, and control, providing the basic methodologies and tools in robotics research and applications. Concepts and models are illustrated through physical robot platforms, interactive robot simulations, and video segments relevant to historical research developments or to emerging application areas in the field. Recommended: matrix algebra."
illinois_CS 412,"Introduction to Data Mining. Concepts, techniques, and systems of data warehousing and data mining. Design and implementation of data warehouse and on-line analytical processing (OLAP) systems; data mining concepts, methods, systems, implementations, and applications. 3 undergraduate hours. 3 or 4 graduate hours. "
purdue_CS 65500,"Advanced Cryptology. Advanced topics in cryptography and cryptanalysis, including selections from the following: Steganographic methods, Cryptanalytic techniques, including differential cryptanalysis, and chosen plaintext attacks. Message digest algorithm construction. Digital cash. Quantum cryptography. N-key systems. Minimal and zero-knowledge systems. Protocol design and failure. Verification of algorithms. Key generation and management. Traffic analysis. VPN construction and operation. Politics, espionage, and law enforcement concerns.  Offered every third semester."
stanford_CS 109,"Introduction to Probability for Computer Scientists. Topics include: counting and combinatorics, random variables, conditional probability, independence, distributions, expectation, point estimation, and limit theorems. Applications of probability in computer science including machine learning and the use of probability in the analysis of algorithms."
mit_6.837,"Computer Graphics. Introduction to computer graphics algorithms, software and hardware. Topics include ray tracing, the graphics pipeline, transformations, texture mapping, shadows, sampling, global illumination, splines, animation and color. 6 Engineering Design Points."
maryland_CMSC 434,"Introduction to Human-Computer Interaction. Assess usability by quantitative and qualitative methods. Conduct task analyses, usability tests, expert reviews, and continuing assessments of working products by interviews, surveys, and logging. Apply design processes and guidelines to develop professional quality user interfaces. Build low-fidelity paper mockups, and a high-fidelity prototype using contemporary tools such as graphic editors and a graphical programming environment (eg: Visual Basic, Java)."
maryland_CMSC 433,"Programming Language Technologies and Paradigms. Programming language technologies (e.g., object-oriented programming), their implementations and use in software design and implementation."
mit_6.436,"Fundamentals of Probability. Introduction to probability theory. Probability spaces and measures. Discrete and continuous random variables. Conditioning and independence. Multivariate normal distribution. Abstract integration, expectation, and related convergence results. Moment generating and characteristic functions. Bernoulli and Poisson process. Finite-state Markov chains. Convergence notions and their relations. Limit theorems. Familiarity with elementary notions in probability and real analysis is desirable."
stanford_CS 168,"The Modern Algorithmic Toolbox. This course will provide a rigorous and hands-on introduction to the central ideas and algorithms that constitute the core of the modern algorithms toolkit. Emphasis will be on understanding the high-level theoretical intuitions and principles underlying the algorithms we discuss, as well as developing a concrete understanding of when and how to implement and apply the algorithms. The course will be structured as a sequence of one-week investigations; each week will introduce one algorithmic idea, and discuss the motivation, theoretical underpinning, and practical applications of that algorithmic idea. Each topic will be accompanied by a mini-project in which students will be guided through a practical application of the ideas of the week. Topics include hashing, dimension reduction and LSH, boosting, linear programming, gradient descent,  sampling and estimation, and an introduction to spectral techniques."
psu_CSE 588,"Complexity in Computer Algebra. Complexity of integer multiplication, polynomial multiplication, fast Fourier transform, division, and calculating the greatest common divisor of poly- nomials."
stanford_CS 262,"Computational Genomics. Applications of computer science to genomics, and concepts in genomics from a computer science point of view. Topics: dynamic programming, sequence alignments, hidden Markov models, Gibbs sampling, and probabilistic context-free grammars. Applications of these tools to sequence analysis: comparative genomics, DNA sequencing and assembly, genomic annotation of repeats, genes, and regulatory sequences, microarrays and gene expression, phylogeny and molecular evolution, and RNA structure."
illinois_CS 546,"Machine Learning in NLP. Central learning frameworks and techniques that have emerged in the field of natural language processing and found applications in several areas in text and speech processing: from information retrieval and extraction, through speech recognition to syntax, semantics and language understanding related tasks. Examination of the theoretical paradigms -- learning theoretic, probabilistic, and information theoretic -- and the relations among them, as well as the main algorithmic techniques developed within each paradigm and in key natural language applications. "
caltech_CS 116,"Reasoning about Program Correctness. This course presents the use of logic and formal reasoning to prove the correctness of sequential and concurrent programs. Topics in logic include propositional logic, basics of first-order logic, and the use of logic notations for specifying programs. The course presents a programming notation and its formal semantics, Hoare logic and its use in proving program correctness, predicate transformers and weakest preconditions, and fixed-point theory and its application to proofs of programs."
psu_CMPSC 360,"Discrete Mathematics for Computer Science. Discrete mathematics and foundations for modern computer science.  Topics include sets, relations, logic, algorithms, graphs, finite state machines and regular expressions."
msu_CSE 836,Probabilistic Models and Algorithms in Computational Biology. Canonical probabilistic models and algorithms used in important bioinformatics tools
psu_CMPSC 467,"Factorization and Primality Testing. Prime sieves, factoring, computer numeration systems, congruences, multiplicative functions, primitive roots, cryptography, quadratic residues. Students who have passed MATH 465 may not schedule this course."
cmu_15-424,"Foundations of Cyber-Physical Systems. Cyber-physical systems (CPSs) combine cyber effects (computation and/or communication) with physical effects (motion or other physical processes). Designing algorithms to control CPSs, such as those in cars, aircraft and robots, is challenging due to their tight coupling with physical behavior. At the same time, it is vital that these algorithms be correct, since we rely on CPSs for safety-critical tasks like keeping aircraft from colliding.  Students in this course will understand the core principles behind CPSs, develop models and controls, identify safety specifications and critical properties of CPSs, understand abstraction and system architectures, learn how to design by invariant, reason rigorously about CPS models, verify CPS models of appropriate scale, understand the semantics of a CPS model and develop an intuition for operational effects. Students will write hybrid programs (HPs), which capture relevant dynamical aspects of CPSs in a simple programming language with a simple semantics, allowing the programmer to refer to real-valued variables representing real quantities and specify their dynamics as part of the HP."
purdue_CS 64100,"Multimedia Database Systems. Prepares students for research in multimedia database systems. Students are exposed to a variety of emerging innovative techniques to store, manipulate, communicate, visualize, and reason with multimedia systems."
psu_CMPSC 402,"UNIX and C. UNIX OS including file system, utilities, and shell scripting; C programming, including I/O, pointers, arrays, dynamic memory, macros, and libraries."
mit_6.046,"Design and Analysis of Algorithms. Techniques for the design and analysis of efficient algorithms, emphasizing methods useful in practice. Topics include sorting; search trees, heaps, and hashing; divide-and-conquer; dynamic programming; greedy algorithms; amortized analysis; graph algorithms; and shortest paths. Advanced topics may include network flow; computational geometry; number-theoretic algorithms; polynomial and matrix calculations; caching; and parallel computing."
iowa_CS:1210,"Computer Science I: Fundamentals. Introduction to programming using Python; programming constructs, data types, problem‑solving strategies, data structures, object‑oriented programming. Requirements: MATH:1020 or MATH:1340 or MATH:1440 or math placement to a calculus course."
stanford_CS 245,"Database Systems Principles. File organization and access, buffer management, performance analysis, and storage management. Database system architecture, query optimization, transaction management, recovery, concurrency control. Reliability, protection, and integrity. Design and management issues."
mit_6.006,"Introduction to Algorithms. Introduction to mathematical modeling of computational problems, as well as common algorithms, algorithmic paradigms, and data structures used to solve these problems. Emphasizes the relationship between algorithms and programming, and introduces basic performance measures and analysis techniques for these problems."
cmu_15-392,"Special Topic: Secure Programming. This course provides a detailed explanation of common programming errors  in C and C++ and describes how these errors can lead to software systems  that are vulnerable to exploitation. The course concentrates on security  issues intrinsic to the C and C++ programming languages and associated  libraries. It does not emphasize security issues involving interactions  with external systems such as databases and web servers, as these are  rich topics on their own. Topics to be covered include the secure and  insecure use of integers, arrays, strings, dynamic memory, formatted  input/output functions, and file I/O."
mit_6.634,"Nonlinear Optics. Techniques of nonlinear optics with emphasis on fundamentals for research and engineering in optics, photonics, and spectroscopy. Electro optic modulators, harmonic generation, and frequency conversion devices. Nonlinear effects in optical fibers including self-phase modulation, nonlinear wave propagation, and solitons. Interaction of light with matter, laser operation, density matrix techniques, nonlinear spectroscopies, and femtosecond optics."
stanford_CS 244B,"Distributed Systems. Distributed operating systems and applications issues, emphasizing high-level protocols and distributed state sharing as the key technologies. Topics: distributed shared memory, object-oriented distributed system design, distributed directory services, atomic transactions and time synchronization, application-sufficient consistency, file access, process scheduling, process migration, and storage/communication abstractions on distribution, scale, robustness in the face of failure, and security."
illinois_CS 538,"Advanced Computer Networks. Advanced concepts in computer networks, including congestion control, quality of service, naming, routing, wireless networks, Internet architecture, measurement, network security, and selected recent research directions. "
illinois_CS 418,"Interactive Computer Graphics. Basic mathematical tools and computational techniques for modeling, rendering, and animating 3-D scenes. Same as CSE 427. 3 undergraduate hours. 3 or 4 graduate hours. "
stanford_CS 90SI,"CS + Social Good: Using Web Technologies to Change the World. Learn web technologies by working on real world projects focused on creating positive social impact. The class will cover basic topics related to web development and provide resources for more advanced learning. Students will work on small teams to implement high-impact projects for partner organizations. The aim of the class is to empower students to leverage technology for social good by inspiring action, facilitating collaboration, and forging pathways toward change. No web application experience required."
mit_6.256,"Algebraic Techniques and Semidefinite Optimization. Theory and computational techniques for optimization problems involving polynomial equations and inequalities with particular, emphasis on the connections with semidefinite optimization. Develops algebraic and numerical approaches of general applicability, with a view towards methods that simultaneously incorporate both elements, stressing convexity-based ideas, complexity results, and efficient implementations. Examples from several engineering areas, in particular systems and control applications. Topics include semidefinite programming, resultants/discriminants, hyperbolic polynomials, Groebner bases, quantifier elimination, and sum of squares."
cmu_15-300,"Research and Innovation in Computer Science. This Fall course is the first part of a two-course sequence that is designed to help prepare students to invent the future state-of-the-art in the field of computer science. Course topics will include the following: an overview of important things to know about how research and innovation works in the field of computer science; a survey of the current cutting- edge of computer science research, both here at Carnegie Mellon and elsewhere; critical thinking skills when reading research publications that disagree with each other; strategies for coping with open-ended problems; and technical communication skills for computer scientists. Students will also match up with a faculty mentor for a potential Technology Innovation Project (to be performed in the Spring), put together a detailed plan of attack for that project, and start to get up to speed (including background reading, etc.). This course can be used to satisfy the Technical Communications requirement for the CS major."
iowa_CS:2230,"Computer Science II: Data Structures. Design, implementation, and application of data structures (e.g., linked lists, stacks, queues, hash tables, trees); complexity analysis; recursion; introduction to object‑oriented programming concepts; abstract data types and their realization using generic interfaces and classes; software design patterns (e.g., iterators, comparators). "
illinois_CS 555,"Numerical Methods for PDEs. Numerical techniques for initial and boundary value problems in partial differential equations. Finite difference and finite element discretization techniques, direct and iterative solution methods for discrete problems, and programming techniques and usage of software packages. Same as CSE 510. "
caltech_CS 124,"Operating Systems. This course explores the major themes and components of modern operating systems, such as kernel architectures, the process abstraction and process scheduling, system calls, concurrency within the OS, virtual memory management, and file systems. Students must work in groups to complete a series of challenging programming projects, implementing major components of an instructional operating system. Most programming is in C, although some IA32 assembly language programming is also necessary. Familiarity with the material in CS 24 is strongly advised before attempting this course."
maryland_CMSC 723,"Computational Linguistics I. Fundamental methods in natural language processing. Topics include: finite-state methods, context-free and extended context-free models of syntax; parsing and semantics interpretation; n-gram and Hidden Markov models, part-of-speech tagging; natural language applications such as machine translation, automatic summarization, and question answering."
cmu_15-112,"Fundamentals of Programming and Computer Science. A technical introduction to the fundamentals of programming with an emphasis  on producing clear, robust, and reasonably efficient code using top-down  design, informal analysis, and effective testing and debugging. Starting  from first principles, we will cover a large subset of the Python  programming language, including its standard libraries and programming  paradigms.  We will also target numerous deployment scenarios, including  standalone programs, shell scripts, and web-based applications.  This course assumes no prior programming experience. Even so, it is a  fast-paced and rigorous preparation for 15-122.  Students seeking a more  gentle introduction to computer science should consider first taking 15-110.    NOTE: students must achieve a C or better in order to use   this course to satisfy the pre-requisite for any subsequent Computer   Science course."
mit_6.442,"Optical Networks. Introduces the fundamental and practical aspects of optical network technology, architecture, design and analysis tools and techniques. The treatment of optical networks are from the architecture and system design points of view. Optical hardware technologies are introduced and characterized as fundamental network building blocks on which optical transmission systems and network architectures are based. Beyond the Physical Layer, the higher network layers (Media Access Control, Network and Transport Layers) are treated together as integral parts of network design. Performance metrics, analysis and optimization techniques are developed to help guide the creation of high performance complex optical networks."
purdue_CS 60300,"Advanced Topics In Distributed Systems. (CSCI 60300) Design and control of distributed computing systems (operating systems and database systems). Topics include principles of naming and location, atomicity, resource sharing, concurrency control and other synchronization, deadlock detection and avoidance, security, distributed data access and control, integration of operating systems and computer networks, distributed systems design, consistency control, and fault tolerance."
psu_CMPSC 313,"Assembly Language Programming. Program design, addressing modes, subroutines, parameter passing, stacks, bit manipulation, text processing, DOS functions, macros, I/O, high level language interfaces."
caltech_CS 115,"Functional Programming. This course is a both a theoretical and practical introduction to functional programming, a paradigm which allows programmers to work at an extremely high level of abstraction while simultaneously avoiding large classes of bugs that plague more conventional imperative and object-oriented languages. The course will introduce and use the lazy functional language Haskell exclusively. Topics include: recursion, first-class functions, higher-order functions, algebraic data types, polymorphic types, function composition, point-free style, proving functions correct, lazy evaluation, pattern matching, lexical scoping, type classes, and modules. Some advanced topics such as monad transformers, parser combinators, dynamic typing, and existential types are also covered."
stanford_CS 225A,"Experimental Robotics. Hands-on laboratory course experience in robotic manipulation. Topics include robot kinematics, dynamics, control, compliance, sensor-based collision avoidance, and human-robot interfaces. Second half of class is devoted to final projects using various robotic platforms to build and demonstrate new robot task capabilities. Previous projects include the development of autonomous robot behaviors of drawing, painting, playing air hocket, yoyo, basketball, ping-pong or xylophone."
cmu_15-365,"Experimental Animation. [IDeATe course] This class will explore animation from the student's perspective with a sense of investigation toward both form and content. Topics in the class will include non-linear narrative, visual music, puppet and non-traditional materials, manipulation of motion and performance capture data, immersive environments."
illinois_CS 425,"Distributed Systems. Protocols, specification techniques, global states and their determination, reliable broadcast, transactions and commitment, security, and real-time systems. Same as ECE 428. 3 undergraduate hours. 3 or 4 graduate hours. "
mit_6.243,"Dynamics of Nonlinear Systems. Introduction to nonlinear deterministic dynamical systems. Nonlinear ordinary differential equations. Planar autonomous systems. Fundamental theory: Picard iteration, contraction mapping theorem, and Bellman-Gronwall lemma. Stability of equilibria by Lyapunov's first and second methods. Feedback linearization. Application to nonlinear circuits and control systems."
mit_6.041,"Probabilistic Systems Analysis. An introduction to probability theory, and the modeling and analysis of probabilistic systems. Probabilistic models, conditional probability. Discrete and continuous random variables. Expectation and conditional expectation. Limit Theorems. Bernoulli and Poisson processes. Markov chains. Bayesian estimation and hypothesis testing. Elements of statistical inference. Meets with graduate subject 6.431, but assignments differ."
psu_CMPSC 441,"Artificial Intelligence. Problem solving, search techniques including local search and genetic algorithms, knowledge representation, planning, learning, and neural networks."
stanford_CS 279,"Computational Biology: Structure and Organization of Biomolecules and Cells. Computational approaches to understanding the three-dimensional spatial organization of biological systems and how that organization evolves over time. The course will cover cutting-edge research in both physics-based simulations and computational analysis of experimental data, at scales ranging from individual molecules to multiple cells."
illinois_CS 357,"Numerical Methods I. Fundamentals of numerical methods for students in science and engineering; floating-point computation, systems of linear equations, approximation of functions and integrals, the single nonlinear equation, and the numerical solution of ordinary differential equations; various applications in science and engineering; programming exercises and use of high quality mathematical library routines. Same as MATH 357. Credit is not given for CS 357 if credit for CS 450 has been earned. (Counts for advanced hours in LAS). "
mit_6.867,"Machine Learning. Principles, techniques, and algorithms in machine learning from the point of view of statistical inference; representation, generalization, and model selection; and methods such as linear/additive models, active learning, boosting, support vector machines, non-parametric Bayesian methods, hidden Markov models, and Bayesian networks. Recommended prerequisite: 6.036."
illinois_CS 525,"Advanced Distributed Systems. Peer-to-peer systems, sensor networks, and fundamental theoretical distributed computing. Review of classical work in each area, and application of design methodologies to explore overlaps across them. Emphasis on protocol design, systems issues, and theory. Reading selections are roughly two-third classical to one-third contemporary. Students write critiques, make presentations, and create a conference paper in a systematic manner. "
illinois_CS 424,"Real-Time Systems. Supervisory control aspects of Cyber Physical Systems (CPS): fundamentals of reliability analysis, real-time scheduling, simple feedback control, software fault tolerance architecture, wireless networking and energy saving, principles of safety critical system engineering. Student groups design and demonstrate supervisory control architecture for a robot. 3 undergraduate hours. 3 or 4 graduate hours. "
mit_6.453,"Quantum Optical Communication. Quantum optics: Dirac notation quantum mechanics; harmonic oscillator quantization; number states, coherent states, and squeezed states; radiation field quantization and quantum field propagation; P-representation and classical fields. Linear loss and linear amplification: commutator preservation and the Uncertainty Principle; beam splitters; phase-insensitive and phase-sensitive amplifiers. Quantum photodetection: direct detection, heterodyne detection, and homodyne detection. Second-order nonlinear optics: phasematched interactions; optical parametric amplifiers; generation of squeezed states, photon-twin beams, non-classical fourth-order interference, and polarization entanglement. Quantum systems theory: optimum binary detection; quantum precision measurements; quantum cryptography; and quantum teleportation."
purdue_CS 50200,"Compiling And Programming Systems. Basic principles of compilers and compiler design; control of translation, loading, and execution; symbolic coding systems; lexical and syntactic analysis, design and operation of assemblers and macroprocessors; design of interpretive systems. Students are expected to complete a large programming project as part of the course."
mit_6.717,"Design and Fabrication of Microelectromechanical Systems. Provides an introduction to microsystem design. Covers material properties, microfabrication technologies, structural behavior, sensing methods, electromechanical actuation, thermal actuation and control, multi-domain modeling, noise, and microsystem packaging. Applies microsystem modeling, and manufacturing principles to the design and analysis a variety of microscale sensors and actuators (e.g., optical MEMS, bioMEMS, and inertial sensors). Emphasizes modeling and simulation in the design process. Students taking the graduate version complete additional assignments. 4 Engineering Design Points."
mit_6.035,"Computer Language Engineering. Analyzes issues associated with the implementation of higher-level programming languages. Fundamental concepts, functions, and structures of compilers. The interaction of theory and practice. Using tools in building software. Includes a multi-person project on compiler design and implementation. 8 Engineering Design Points."
psu_CSE 560,"Theory of Graphs and Networks. Theory and applications of graphs, including structure of graphs, network analysis, and algorithms for computer solution of graph-theoretic problems."
psu_CMPSC 450,"Concurrent Scientific Programming. Problems of synchronization, concurrent execution, and their solution techniques. Design and implementation of concurrent software in a distributed system."
cmu_15-121,"Introduction to Data Structures. A continuation of the process of program design and analysis for  students with some prior programming experience (functions, loops, and  arrays, not necessarily in Java). The course reinforces object-oriented  programming techniques in Java and covers data aggregates, data  structures (e.g., linked lists, stacks, queues, trees, and graphs), and  an introduction to the analysis of algorithms that operate on those data  structures."
mit_6.801,"Machine Vision. Deriving a symbolic description of the environment from an image. Understanding physics of image formation. Image analysis as an inversion problem. Binary image processing and filtering of images as preprocessing steps. Recovering shape, lightness, orientation, and motion. Using constraints to reduce the ambiguity. Photometric stereo and extended Gaussian sphere. Applications to robotics; intelligent interaction of machines with their environment. Students taking the graduate version complete different assignments."
iowa_CS:4420,"Artificial Intelligence. Introduction to artificial intelligence covering problem‑solving methods, heuristic search, knowledge representation, automated reasoning, planning, game playing, machine learning, and neural networks. "
mit_6.UAP,"Undergraduate Advanced Project. Research project for those students completing the SB degree, to be arranged by the student and an appropriate MIT faculty member. Students who register for this subject must consult the department undergraduate office. Students engage in extensive written communications exercises."
stanford_CS 210B,"Software Project Experience with Corporate Partners. Continuation of CS210A. Focus is on real-world software development. Corporate partners seed projects with loosely defined challenges from their R&D labs; students innovate to build their own compelling software solutions. Student teams are treated as start-up companies with a budget and a technical advisory board comprised of the instructional staff and corporate liaisons. Teams will typically travel to the corporate headquarters of their collaborating partner, meaning some teams will travel internationally. Open loft classroom format such as found in Silicon Valley software companies. Exposure to: current practices in software engineering; techniques for stimulating innovation; significant development experience with creative freedoms; working in groups; real world software engineering challenges; public presentation of technical work; creating written descriptions of technical work."
mit_6.878,"Advanced Computational Biology: Genomes, Networks, Evolution. See description for 6.047. Additionally examines recent publications in the areas covered, with research-style assignments. A more substantial final project is expected, which can lead to a thesis and publication."
stanford_CS 348A,"Computer Graphics: Geometric Modeling. The mathematical tools needed for the geometrical aspects of computer graphics and especially for modeling smooth shapes. Fundamentals: homogeneous coordinates, transformations, and perspective. Theory of parametric and implicit curve and surface models: polar forms, Bézier arcs and de Casteljau subdivision, continuity constraints, B-splines, tensor product, and triangular patch surfaces. Subdivision surfaces and multi-resolution representations of geometry. Representations of solids and conversions among them. Surface reconstruction from scattered data points. Geometry processing on meshes, including simplification and parameterization."
illinois_CS 423,"Operating Systems Design. Organization and structure of modern operating systems and concurrent programming concepts. Deadlock, virtual memory, processor scheduling, and disk systems. Performance, security, and protection. Same as CSE 423. 3 undergraduate hours. 3 or 4 graduate hours. "
psu_CMPSC 488,"Computer Science Project. Project design and implementation with an emphasis on team work, documentation, and the employment and integration of computer science concepts."
cmu_15-210,"Parallel and Sequential Data Structures and Algorithms. Teaches students about how to design, analyze, and program algorithms and data structures.  The course emphasizes parallel algorithms and analysis, and how sequential algorithms can be considered a special case.  The course goes into more theoretical content on algorithm analysis than 15-122 and 15-150 while still including a significant programming component and covering a variety of practical applications such as problems in data analysis, graphics, text processing, and the computational sciences.  NOTE: students must achieve a C or better in order to use this course to satisfy the pre-requisite for any subsequent Computer  Science course."
stanford_CS 103,"Mathematical Foundations of Computing. Mathematical foundations required for computer science, including propositional predicate logic, induction, sets, functions, and relations. Formal language theory, including regular expressions, grammars, finite automata, Turing machines, and NP-completeness. Mathematical rigor, proof techniques, and applications."
illinois_CS 522,"Programming Language Semantics. Theory of programming languages including functional programming, meta-circular interpreters, typed, untyped and polymorphic lambda-calculi, and denotational semantics. "
purdue_CS 54100,"Database Systems. Fundamentals for the logical design of database systems. The entity-relationship model, semantic model, relational model, hierarchical model, network model. Implementations of the models. Design theory for relational databases. Design of query languages and the use of semantics for query optimization. Design and verification of integrity assertions, and security. Introduction to intelligent query processing and database machines."
mit_6.842,"Randomness and Computation. The power and sources of randomness in computation. Connections and applications to computational complexity, computational learning theory, cryptography and combinatorics. Topics include: probabilistic proofs, uniform generation and approximate counting, Fourier analysis of Boolean functions, computational learning theory, expander graphs, pseudorandom generators, derandomization."
stanford_CS 244,"Advanced Topics in Networking. Classic papers, new ideas, and research papers in networking. Architectural principles: naming, addressing, routing; congestion control, traffic management, QoS; wireless and mobility; overlay networks and virtualization; network security; switching and routing; content distribution; and proposals for future Internet structures."
maryland_CMSC 412,"Operating Systems. A hands-on introduction to operating systems, including topics in: multiprogramming, communication and synchronization, memory management, IO subsystems, and resource scheduling polices. The laboratory component consists of constructing a small kernel, including functions for device IO, multi-tasking, and memory management."
msu_CSE 231,"Introduction to Programming I. Introduction to programming using Python. Design, implementation and testing of programs to solve problems such as those in engineering, mathematics and science. Programming fundamentals, functions, objects, and use of libraries of functions."
maryland_CMSC 421,"Introduction to Artificial Intelligence. Areas and issues in artificial intelligence, including search, inference, knowledge representation, learning, vision, natural languages, expert systems, robotics. Implementation and application of programming languages (e.g. LISP, PROLOG, SMALLTALK), programming techniques (e.g. pattern matching, discrimination networks) and control structures (e.g. agendas, data dependencies)."
caltech_CS/EE 143,"Communication Networks. This course introduces the basic mechanisms and protocols in communication networks, and mathematical models for their analysis. It covers topics such as digitization, switching, switch design, routing, error control (ARQ), congestion control, layering, queuing models, optimization models, basics of protocols in the Internet, wireless networks, and optical networks."
cmu_15-410,"Operating System Design and Implementation. Operating System Design and Implementation is a rigorous hands-on introduction to the principles and practice of operating systems. The core experience is writing a small Unix-inspired OS kernel, in C with some x86 assembly language, which runs on a PC hardware simulator (and on actual PC hardware if you wish).  Work is done in two-person teams, and ""team programming"" skills (source control, modularity, documentation) are emphasized.  The size and scope of the programming assignments typically result in students significantly developing their design, implementation, and debugging abilities. Core concepts include the process model, virtual memory, threads, synchronization, and deadlock; the course also surveys higher-level OS topics including file systems, interprocess communication, networking, and security.  Students, especially graduate students, who have not satisfied the prerequisite at Carnegie Mellon are strongly cautioned - to enter the class you must be able to write a storage allocator in C, use a debugger, understand 2's-complement arithmetic, and translate between C and x86 assembly language.  The instructor may require you to complete a skills assessment exercise before the first week of the semester in order to remain registered in the class.  Auditing:  this course is usually full, and we generally receive many more requests to audit than we can accept.  If you wish to audit, please have your advisor contact us before the semester begins to discuss your educational goals."
maryland_CMSC 427,"Computer Graphics. An introduction to the principles of computer graphics. Includes an introduction to graphics displays and systems. Introduction to the mathematics of affine and projective transformations, perspective, curve and surface modeling, algorithms for hidden-surface removal, color models, methods for modeling illumination, shading, and reflection."
stanford_CS 9,"Problem-Solving for the CS Technical Interview. This course will prepare students to interview for software engineering and related internships and full-time positions in industry. Drawing on multiple sources of actual interview questions, students will learn key problem-solving strategies specific to the technical/coding interview. Students will be encouraged to synthesize information they have learned across different courses in the major. Emphasis will be on the oral and combination written-oral modes of communication common in coding interviews, but which are unfamiliar settings for problem solving for many students."
mit_6.440,"Essential Coding Theory. Introduces the theory of error-correcting codes. Focuses on the essential results in the area, taught from first principles. Special focus on results of asymptotic or algorithmic significance. Principal topics include construction and existence results for error-correcting codes; limitations on the combinatorial performance of error-correcting codes; decoding algorithms; and applications to other areas of mathematics and computer science."
psu_CMPSC 102,"Introduction to Visual Programming. Problem solving for non-majors; high-level language programming; controlstructures, functions, parameters, recursion, arrays, records/ structures; verification; debugging; documentation."
stanford_CS 294S,"Research Project in Software Systems and Security. Topics vary. Focus is on emerging research themes such as programmable open mobile Internet that spans multiple system topics such as human-computer interaction, programming systems, operating systems, networking, and security. May be repeated for credit."
mit_6.774,"Physics of Microfabrication: Front End Processing. Presents advanced physical models and practical aspects of front-end microfabrication processes, such as oxidation, diffusion, ion implantation, chemical vapor deposition, atomic layer deposition, etching, and epitaxy. Covers topics relevant to CMOS, bipolar, and optoelectronic device fabrication, including high k gate dielectrics, gate etching, implant-damage enhanced diffusion, advanced metrology, stress effects on oxidation, non-planar and nanowire device fabrication, SiGe and fabrication of process-induced strained Si. Exposure to CMOS process integration concepts, and impacts of processing on device characteristics. Students use modern process simulation tools."
stanford_CS 247,"Human-Computer Interaction Design Studio. Project-based focus on interaction design process, especially early-stage design and rapid prototyping. Methods used in interaction design including needs analysis, user observation, sketching, concept generation, scenario building, and evaluation."
iowa_CS:3820,"Programming Language Concepts. Imperative, functional, and logical programming languages, and differences between them; syntax specification, types, control structures, recursion, data abstraction. "
iowa_CS:3980,Topics in Computer Science I. Complement to material in other courses. 
mit_6.UAR,"Seminar in Undergraduate Advanced Research. Instruction in effective undergraduate research, including choosing and developing a research topic, surveying previous work and publications, research topics in EECS, industry best practices, design for robustness, technical presentation, authorship and collaboration, and ethics. Material covered over both fall and spring terms. Students engage in extensive written and oral communication exercises, in the context of an approved advanced research project."
stanford_CS 241,"Embedded Systems Workshop. Project-centric building hardware and software for embedded computing systems. Students work on an existing project of their own or join one of these projects. Syllabus topics will be determined by the needs of the enrolled students and projects. Examples of topics include: interrupts and concurrent programming, deterministic timing and synchronization, state-based programming models, filters, frequency response, and high-frequency signals, low power operation, system and PCB design, security, and networked communication."
mit_6.042,"Mathematics for Computer Science. Elementary discrete mathematics for computer science and engineering. Emphasis on mathematical definitions and proofs as well as on applicable methods. Topics: formal logic notation, proof methods; induction, well-ordering; sets, relations; elementary graph theory; integer congruences; asymptotic notation and growth of functions; permutations and combinations, counting principles; discrete probability. Further selected topics such as: recursive definition and structural induction; state machines and invariants; recurrences; generating functions."
mit_6.856,"Randomized Algorithms. Studies how randomization can be used to make algorithms simpler and more efficient via random sampling, random selection of witnesses, symmetry breaking, and Markov chains. Models of randomized computation. Data structures: hash tables, and skip lists. Graph algorithms: minimum spanning trees, shortest paths, and minimum cuts. Geometric algorithms: convex hulls, linear programming in fixed or arbitrary dimension. Approximate counting; parallel algorithms; online algorithms; derandomization techniques; and tools for probabilistic analysis of algorithms."
cmu_15-456,"Computational Geometry. How do you sort points in space?  What does it even mean?  This course takes the ideas of a traditional algorithms course, sorting, searching, selecting, graphs, and optimization, and extends them to problems on geometric inputs.  We will cover many classical geometric constructions and novel algorithmic methods.  Some of the topics to be covered are convex hulls, Delaunay triangulations, graph drawing, point location, geometric medians, polytopes, configuration spaces, linear programming, and others.  This course is a natural extension to 15-451, for those who want to learn about algorithmic problems in higher dimensions."
iowa_CS:4640,"Computer Security. Mechanism versus policy; authentication, access control, security domains; perimeter security, defense in depth; cryptographic protocols; key management and distribution; security assessment. "
caltech_CS/EE 146,"Advanced Networking. This is a research-oriented course meant for undergraduates and beginning graduate students who want to learn about current research topics in networks such as the Internet, power networks, social networks, etc. The topics covered in the course will vary, but will be pulled from current research topics in the design, analysis, control, and optimization of networks, protocols, and Internet applications. Usually offered in alternate years."
caltech_CMS/CS 139,"Analysis and Design of Algorithms. This course covers advanced topics in the design and analysis of algorithms. Topics are drawn from approximation algorithms, randomized algorithms, online algorithms, streaming algorithms, and other areas of current research interest in algorithms."
psu_CSE 541,Database Systems I. Data models and relational database design; database integrity and concurrency control; distributed database design and concurrency control; query optimization.
psu_CMPSC 121,"Introduction to Programming Techniques. Design and implementation of algorithms.  Structured programming.  Problem solving techniques.  Introduction to a high-level language, including arrays, procedures, and recursion."
mit_6.851,Advanced Data Structures. More advanced and powerful data structures for answering several queries on the same data. Such structures are crucial in particular for designing efficient algorithms. Dictionaries; hashing; search trees. Self-adjusting data structures; linear search; splay trees; dynamic optimality. Integer data structures; word RAM. Predecessor problem; van Emde Boas priority queues; y-fast trees; fusion trees. Lower bounds; cell-probe model; round elimination. Dynamic graphs; link-cut trees; dynamic connectivity. Strings; text indexing; suffix arrays; suffix trees. Static data structures; compact arrays; rank and select. Succinct data structures; tree encodings; implicit data structures. External-memory and cache-oblivious data structures; B-trees; buffer trees; tree layout; ordered-file maintenance. Temporal data structures; persistence; retroactivity.
stanford_CS 124,"From Languages to Information. Extracting meaning, information, and structure from human language text, speech, web pages, genome sequences, social networks. Methods include: string algorithms, edit distance, language modeling, the noisy channel, naive Bayes, inverted indices, collaborative filtering, PageRank. Applications such as question answering, sentiment analysis, information retrieval, text classification, social network models, machine translation, genomic sequence alignment, spell checking, speech processing, recommender systems."
mit_6.521,Cellular Biophysics. Meets with undergraduate subject 6.021[J]. Requires the completion of more advanced home problems and/or an additional project.
illinois_CS 524,"Concurrent Progrmg Languages. Theory of concurrency and concurrent programming languages. Formal models of concurrent computation such as process algebras, nets, and actors; high level concurrent programming languages and their operational semantics; methods for reasoning about correctness and complexity of concurrent programs. "
illinois_CS 473,"Fundamental Algorithms. Fundamental techniques for algorithm design and analysis, including recursion, dynamic programming, randomization, dynamic data structures, fundamental graph algorithms, and NP-completeness. Intended for undergraduates in Computer Science and graduate students in other departments. Same as CSE 414 and MATH 473. 3 undergraduate hours. 3 or 4 graduate hours. "
mit_6.849,"Geometric Folding Algorithms: Linkages, Origami, Polyhedra. Covers discrete geometry and algorithms underlying the reconfiguration of foldable structures, with applications to robotics, manufacturing, and biology. Linkages made from one-dimensional rods connected by hinges: constructing polynomial curves, characterizing rigidity, characterizing unfoldable versus locked, protein folding. Folding two-dimensional paper (origami): characterizing flat foldability, algorithmic origami design, one-cut magic trick. Unfolding and folding three-dimensional polyhedra: edge unfolding, vertex unfolding, gluings, Alexandrov's Theorem, hinged dissections."
illinois_CS 457,"Numerical Methods II. Continuation of CS 357. Orthogonalization methods for least squares, Krylov subspace methods, non-linear equations and optimization in multiple dimensions, initial and boundary value problems for ordinary and partial differential equations. 3 undergraduate hours. No graduate credit. Credit is not given for both CS 457 and CS 450. "
psu_CSE 563,Parallel Algorithms. Computational aspects of VLSI: synthesis/analysis of efficient parallel and distributed algorithms; computational structures; models of parallel computers and their interrelationships.
stanford_CS 131,"Computer Vision: Foundations and Applications. Robots that can navigate space and perform duties, search engines that can index billions of images and videos, algorithms that can diagnose medical images for diseases, or smart cars that can see and drive safely: Lying in the heart of these modern AI applications are computer vision technologies that can perceive, understand and reconstruct the complex visual world. This course is designed for students who are interested in learning about the fundamental principles and important applications of computer vision. Course will introduce a number of fundamental concepts in computer vision and expose students to a number of real-world applications, plus guide students through a series of well designed projects such that they will get to implement cutting-edge computer vision algorithms."
mit_6.141,"Robotics: Science and Systems I. Presents concepts, principles, and algorithms for sensing and computation related to the physical world. Topics include motion planning, geometric reasoning, kinematics and dynamics, state estimation, tracking, map building, manipulation, human-robot interaction, fault diagnosis, and embedded system development. Students specify and design a small-scale yet complex robot capable of real-time interaction with the natural world. Students may continue content in 6.142[J]. Prior knowledge of one or more of the following areas would be useful: control (2.004, 6.302, or 16.30); software (1.00, 6.005, 6.0001, 6.0002, or 16.35); electronics (6.002, 6.070[J], 6.111, or 6.115); mechanical engineering (2.007); or independent experience in 6.146 competition or a relevant UROP. Students engage in extensive written and oral communication exercises. 12 Engineering Design Points."
mit_6.242,"Advanced Linear Control Systems. Introduction to uncertain multivariable control systems, plus modeling assumptions and objectives. Stability of linear time invariant systems, coprime factorization, parametrization of all stabilizing compensators. Design using H2, H∞ L1 -optimization. Stability and performance robustness in the presence of structured uncertainty."
mit_6.823,"Computer System Architecture. Introduction to the principles underlying modern computer architecture. Emphasizes the relationship among technology, hardware organization, and programming systems in the evolution of computer architecture. Topics include pipelined, out-of-order, and speculative execution; caches, virtual memory and exception handling, superscalar, very long instruction word (VLIW), vector, and multithreaded processors; on-chip networks, memory models, synchronization, and cache coherence protocols for multiprocessors. 4 Engineering Design Points."
mit_6.008,"Introduction to Inference. Introduces probabilistic modeling for problems of inference and machine learning from data, emphasizing analytical and computational aspects. Distributions, marginalization, conditioning, and structure; graphical representations. Belief propagation, decision-making, classification, estimation, and prediction. Sampling methods and analysis. Introduces asymptotic analysis and information measures, and applications."
princeton_COS  226,"Algorithms and Data Structures. This course surveys the most important algorithms and data structures in use on computers today. Particular emphasis is given to algorithms for sorting, searching, and string processing. Fundamental algorithms in a number of other areas are covered as well, including geometric algorithms, graph algorithms, and some numerical algorithms. The course will concentrate on developing implementations, understanding their performance characteristics, and estimating their potential effectiveness in applications."
illinois_CS 563,"Advanced Computer Security. Current research trends in computer and network security. Privacy, tamper-resistance, unwanted traffic, monitoring and surveillance, and critical infrastructure protection. Subtopics will vary depending upon current research trends. Students work in teams in close coordination with the course instructor to develop one of the topics in depth by carrying out background research and an exploratory project. Same as ECE 524. "
cmu_15-417,"HOT Compilation. The course covers the implementation of compilers for higher-order, typed languages such as ML and Haskell, and gives an introduction to type-preserving compilation.  Topics covered include type inference, elaboration, CPS conversion, closure conversion, garbage collection, phase splitting, and typed assembly language."
stanford_CS 224N,"Natural Language Processing. Methods for processing human language information and the underlying computational properties of natural languages. Syntactic and semantic processing from linguistic and algorithmic perspectives. Focus is on modern quantitative techniques in NLP: using large corpora, statistical models for acquisition, translation, and interpretation; and representative systems."
maryland_CMSC 420,"Data Structures. Description, properties, and storage allocation of data structures including lists and trees. Algorithms for manipulating structures. Applications from areas such as data processing, information retrieval, symbol manipulation, and operating systems."
psu_CMPSC 397A,"Stateware Project. Working in a simulated commercial environment, students will develop non- trival software in service of research efforts at Penn State. Students will learn proper software engineering techniques and obtain practice in designing, developing and deploying a medium-scale software system."
cmu_15-457,Special Topics in Theory: Advanced Algorithms. Selected advanced topics in algorithms and computational  theory. Topics vary from semester to semester.
iowa_CS:2620,"Networking and Security for Informatics. Introduction to computer networking, overview of network organization and management; basic understanding of encryption and network security; practical experience in network programming. "
psu_CMPSC 487W,"Software Engineering and Design. Software development process, life cycle; requirements analysis, specification, design, prototyping, testing, project management, and documentation."
psu_CSE 543,"Computer Security. Specification and design of secure systems; security models, architectural issues, verification and validation, and applications in secure database management systems."
purdue_CS 58000,"Algorithm Design, Analysis, And Implementation. Basic techniques for designing and analyzing algorithms: dynamic programming, divide and conquer, balancing. Upper and lower bounds on time and space costs, worst case and expected cost measures. A selection of applications such as disjoint set union/find, graph algorithms, search trees, pattern matching. The polynomial complexity classes P, NP, and co-NP; intractable problems."
psu_CMPSC 469,"Formal Languages with Applications. Regular, context free, recursive, and recursively enumerable languages; associated machine models; applications."
msu_CSE 476,Mobile Application Development. Software development techniques for mobile devices such as smart phones and tablet computers.
mit_6.UAT,"Oral Communication. Provides instruction in aspects of effective technical oral presentations and exposure to communication skills useful in a workplace setting. Students create, give and revise a number of presentations of varying length targeting a range of different audiences."
